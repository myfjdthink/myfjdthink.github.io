(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{520:function(a,r,t){a.exports=t.p+"assets/img/-1514879164698.d126b5a6.png"},521:function(a,r,t){a.exports=t.p+"assets/img/-1514881368043.29055dd4.png"},643:function(a,r,t){"use strict";t.r(r);var e=t(2),s=Object(e.a)({},(function(){var a=this,r=a._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h1",{attrs:{id:"node-js-内存模型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#node-js-内存模型"}},[a._v("#")]),a._v(" Node.js 内存模型")]),a._v(" "),r("h2",{attrs:{id:"前言"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[a._v("#")]),a._v(" 前言")]),a._v(" "),r("p",[a._v("本文尝试理清 js 内存模型的相关知识点，鉴于 js 的教程非常丰富，这里就不重复写了，只建立个知识索引就好了，详细知识看文末的参考文章即可")]),a._v(" "),r("h2",{attrs:{id:"栈与堆"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#栈与堆"}},[a._v("#")]),a._v(" 栈与堆")]),a._v(" "),r("p",[a._v("基础数据类型存在栈中，对象存储在堆中")]),a._v(" "),r("ol",[r("li",[a._v("基础数据类型")])]),a._v(" "),r("ul",[r("li",[a._v("Undefined")]),a._v(" "),r("li",[a._v("Null")]),a._v(" "),r("li",[a._v("Boolean")]),a._v(" "),r("li",[a._v("Number")]),a._v(" "),r("li",[a._v("String")])]),a._v(" "),r("ol",{attrs:{start:"2"}},[r("li",[a._v("引用类型")])]),a._v(" "),r("p",[a._v("Object、Function、Array和自定义的对象，可以看做是指针。指针是存在栈中，但是指向的变量在堆中\n"),r("img",{attrs:{src:t(520),alt:"-1514879164698.png"}})]),a._v(" "),r("p",[a._v("下面代码表现了基础类型和引用类型的区别")]),a._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("// demo01.js\nvar a = 20;\nvar b = a;\nb = 30;\n// 这时 a 的值是多少？ // 20\n")])]),a._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[a._v("1")]),r("br"),r("span",{staticClass:"line-number"},[a._v("2")]),r("br"),r("span",{staticClass:"line-number"},[a._v("3")]),r("br"),r("span",{staticClass:"line-number"},[a._v("4")]),r("br"),r("span",{staticClass:"line-number"},[a._v("5")]),r("br")])]),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("// demo02.js\nvar m = { a: 10, b: 20 }\nvar n = m;\nn.a = 15;\n// 这时 m.a 的值是多少? // 15\n")])]),a._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[a._v("1")]),r("br"),r("span",{staticClass:"line-number"},[a._v("2")]),r("br"),r("span",{staticClass:"line-number"},[a._v("3")]),r("br"),r("span",{staticClass:"line-number"},[a._v("4")]),r("br"),r("span",{staticClass:"line-number"},[a._v("5")]),r("br")])]),r("h2",{attrs:{id:"执行上下文"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文"}},[a._v("#")]),a._v(" 执行上下文")]),a._v(" "),r("h3",{attrs:{id:"概念"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[a._v("#")]),a._v(" 概念")]),a._v(" "),r("p",[a._v("每次当控制器转到ECMAScript可执行代码的时候，就会进入到一个执行上下文。可执行代码的类型包括：")]),a._v(" "),r("ul",[r("li",[a._v("全局代码（Global code）")])]),a._v(" "),r("p",[a._v("这种类型的代码是在”程序”级处理的：例如加载外部的js文件或者本地标签内的代码。全局代码不包括任何function体内的代码。 这个是默认的代码运行环境，一旦代码被载入，引擎最先进入的就是这个环境。")]),a._v(" "),r("ul",[r("li",[a._v("函数代码（Function code）")]),a._v(" "),r("li",[a._v("Eval代码（Eval code）\n执行栈 demo")])]),a._v(" "),r("p",[r("img",{attrs:{src:t(521),alt:"-1514881368043.png"}})]),a._v(" "),r("h3",{attrs:{id:"建立的细节"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#建立的细节"}},[a._v("#")]),a._v(" 建立的细节")]),a._v(" "),r("p",[a._v("1、创建阶段【当函数被调用，但未执行任何其内部代码之前】")]),a._v(" "),r("ul",[r("li",[r("p",[a._v("创建作用域链（Scope Chain）")])]),a._v(" "),r("li",[r("p",[a._v("创建变量，函数和参数。")])]),a._v(" "),r("li",[r("p",[a._v("求”this“的值\n2、执行阶段")])])]),a._v(" "),r("p",[a._v("初始化变量的值和函数的引用，解释/执行代码。")]),a._v(" "),r("p",[r("strong",[a._v("我们可以将每个执行上下文抽象为一个对象，这个对象具有三个属性")])]),a._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("ECObj: {\n    scopeChain: { /* 变量对象（variableObject）+ 所有父级执行上下文的变量对象*/ }, \n    variableObject: { /*函数 arguments/参数，内部变量和函数声明 */ }, \n    this: {} \n}\n")])]),a._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[a._v("1")]),r("br"),r("span",{staticClass:"line-number"},[a._v("2")]),r("br"),r("span",{staticClass:"line-number"},[a._v("3")]),r("br"),r("span",{staticClass:"line-number"},[a._v("4")]),r("br"),r("span",{staticClass:"line-number"},[a._v("5")]),r("br")])]),r("h3",{attrs:{id:"变量对象"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#变量对象"}},[a._v("#")]),a._v(" 变量对象")]),a._v(" "),r("p",[a._v("变量对象（Variable object）是说JS的执行上下文中都有个对象用来存放执行上下文中可被访问但是不能被delete的函数标示符、形参、变量声明等。它们会被挂在这个对象上。")]),a._v(" "),r("h3",{attrs:{id:"代码示例"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#代码示例"}},[a._v("#")]),a._v(" 代码示例")]),a._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("var color = 'blue';\n\nfunction changeColor() {\n    var anotherColor = 'red';\n\n    function swapColors() {\n        var tempColor = anotherColor;\n        anotherColor = color;\n        color = tempColor;\n    }\n\n    swapColors();\n}\n\nchangeColor();\n")])]),a._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[a._v("1")]),r("br"),r("span",{staticClass:"line-number"},[a._v("2")]),r("br"),r("span",{staticClass:"line-number"},[a._v("3")]),r("br"),r("span",{staticClass:"line-number"},[a._v("4")]),r("br"),r("span",{staticClass:"line-number"},[a._v("5")]),r("br"),r("span",{staticClass:"line-number"},[a._v("6")]),r("br"),r("span",{staticClass:"line-number"},[a._v("7")]),r("br"),r("span",{staticClass:"line-number"},[a._v("8")]),r("br"),r("span",{staticClass:"line-number"},[a._v("9")]),r("br"),r("span",{staticClass:"line-number"},[a._v("10")]),r("br"),r("span",{staticClass:"line-number"},[a._v("11")]),r("br"),r("span",{staticClass:"line-number"},[a._v("12")]),r("br"),r("span",{staticClass:"line-number"},[a._v("13")]),r("br"),r("span",{staticClass:"line-number"},[a._v("14")]),r("br"),r("span",{staticClass:"line-number"},[a._v("15")]),r("br")])]),r("h2",{attrs:{id:"闭包概念"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#闭包概念"}},[a._v("#")]),a._v(" 闭包概念")]),a._v(" "),r("p",[a._v("MDN 对闭包的定义为：")]),a._v(" "),r("blockquote",[r("p",[a._v("闭包是指那些能够访问自由变量的函数。")])]),a._v(" "),r("p",[a._v("那什么是自由变量呢？")]),a._v(" "),r("blockquote",[r("p",[a._v("自由变量是指在函数中使用的，但既不是函数参数也不是函数的局部变量的变量。")])]),a._v(" "),r("p",[a._v("由此，我们可以看出闭包共有两部分组成：")]),a._v(" "),r("blockquote",[r("p",[a._v("闭包 = 函数 + 函数能够访问的自由变量")])]),a._v(" "),r("p",[a._v("举个例子：")]),a._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("var a = 1;\n\nfunction foo() {\n    console.log(a);\n}\n\nfoo();\n")])]),a._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[a._v("1")]),r("br"),r("span",{staticClass:"line-number"},[a._v("2")]),r("br"),r("span",{staticClass:"line-number"},[a._v("3")]),r("br"),r("span",{staticClass:"line-number"},[a._v("4")]),r("br"),r("span",{staticClass:"line-number"},[a._v("5")]),r("br"),r("span",{staticClass:"line-number"},[a._v("6")]),r("br"),r("span",{staticClass:"line-number"},[a._v("7")]),r("br")])]),r("p",[a._v("foo 函数可以访问变量 a，但是 a 既不是 foo 函数的局部变量，也不是 foo 函数的参数，所以 a 就是自由变量。")]),a._v(" "),r("p",[a._v("那么，函数 foo + foo 函数访问的自由变量 a 就构成了一个闭包")]),a._v(" "),r("p",[a._v("js 不会销毁被闭包引用的对象")]),a._v(" "),r("h2",{attrs:{id:"gc-垃圾回收"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#gc-垃圾回收"}},[a._v("#")]),a._v(" GC 垃圾回收")]),a._v(" "),r("p",[a._v("Garbage Collection 垃圾回收是一种自动的内存管理机制。当一个电脑上的动态内存不再需要时，就应该予以释放，以让出内存，这种内存资源管理，称为垃圾回收。")]),a._v(" "),r("h3",{attrs:{id:"新生代和老生代内存分区"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#新生代和老生代内存分区"}},[a._v("#")]),a._v(" 新生代和老生代内存分区")]),a._v(" "),r("p",[a._v("为什么要分区？为了 GC 效率")]),a._v(" "),r("h3",{attrs:{id:"新生代的-gc-算法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#新生代的-gc-算法"}},[a._v("#")]),a._v(" 新生代的 GC 算法")]),a._v(" "),r("p",[a._v("Scavenge 算法，它将堆内存一分为二，将存活对象在从空间 1 复制到空间 2，其他对象被回收。特点是速度快。新生代内存的对象过大或者存活时间过长就会去到老生代内存。")]),a._v(" "),r("h3",{attrs:{id:"老生代的-gc-算法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#老生代的-gc-算法"}},[a._v("#")]),a._v(" 老生代的 GC 算法")]),a._v(" "),r("p",[a._v("Mark-Sweep 标记清除算法，标记清除回收之后，内存会变得碎片化。")]),a._v(" "),r("p",[a._v("Mark-Compact 标记整理算法，在整理过程中，将活着的对象往一端移动，移动完成后，直接清理掉边界外的内存。")]),a._v(" "),r("h3",{attrs:{id:"内存泄露"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#内存泄露"}},[a._v("#")]),a._v(" 内存泄露")]),a._v(" "),r("p",[a._v("本质上，内存泄漏可以定义为：应用程序不再需要占用内存的时候，由于某些原因，内存没有被操作系统或可用内存池回收。编程语言管理内存的方式各不相同。只有开发者最清楚哪些内存不需要了，操作系统可以回收。一些编程语言提供了语言特性，可以帮助开发者做此类事情。另一些则寄希望于开发者对内存是否需要清晰明了。")]),a._v(" "),r("h3",{attrs:{id:"排除方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#排除方法"}},[a._v("#")]),a._v(" 排除方法")]),a._v(" "),r("ol",[r("li",[a._v("抓下内存快照，使用 chrome 分析，使用框架和各种库的时候干扰项非常多")]),a._v(" "),r("li",[r("a",{attrs:{href:"https://alinode.aliyun.com/",target:"_blank",rel:"noopener noreferrer"}},[a._v("alinode"),r("OutboundLink")],1)])]),a._v(" "),r("h2",{attrs:{id:"参考文章"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[a._v("#")]),a._v(" 参考文章")]),a._v(" "),r("p",[a._v("重要")]),a._v(" "),r("ol",[r("li",[r("p",[r("a",{attrs:{href:"https://wanghan0.github.io/2017/05/07/closure5/",target:"_blank",rel:"noopener noreferrer"}},[a._v("深入理解闭包（五）——作用域、作用域链和执行上下文"),r("OutboundLink")],1)])]),a._v(" "),r("li",[r("p",[r("a",{attrs:{href:"http://www.cnblogs.com/zldream1106/p/how-do-javascript-closures-work.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("深入理解JavaScript闭包【译】"),r("OutboundLink")],1)])]),a._v(" "),r("li",[r("p",[r("a",{attrs:{href:"https://segmentfault.com/a/1190000009041008",target:"_blank",rel:"noopener noreferrer"}},[a._v("深入理解JavaScript执行上下文、函数堆栈、提升的概念"),r("OutboundLink")],1)])]),a._v(" "),r("li",[r("p",[r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Functions#%E9%97%AD%E5%8C%85%28Closures%29",target:"_blank",rel:"noopener noreferrer"}},[a._v("MDN 函数"),r("OutboundLink")],1)])]),a._v(" "),r("li",[r("p",[r("a",{attrs:{href:"https://github.com/mqyqingfeng/Blog/issues/9",target:"_blank",rel:"noopener noreferrer"}},[a._v("JavaScript深入之闭包"),r("OutboundLink")],1)])]),a._v(" "),r("li",[r("p",[r("a",{attrs:{href:"https://cnodejs.org/topic/58eb5d378cda07442731569f",target:"_blank",rel:"noopener noreferrer"}},[a._v("轻松排查线上Node内存泄漏问题"),r("OutboundLink")],1)])]),a._v(" "),r("li",[r("p",[r("a",{attrs:{href:"https://jinlong.github.io/2016/05/01/4-Types-of-Memory-Leaks-in-JavaScript-and-How-to-Get-Rid-Of-Them/",target:"_blank",rel:"noopener noreferrer"}},[a._v("4类 JavaScript 内存泄漏及如何避免"),r("OutboundLink")],1),a._v(" 介绍了如何使用 chrome dev tool 排查内存泄露\n不重要")])]),a._v(" "),r("li",[r("p",[r("a",{attrs:{href:"http://alinode.aliyun.com/blog/38",target:"_blank",rel:"noopener noreferrer"}},[a._v("解读 V8 GC Log（二）: 堆内外内存的划分与 GC 算法"),r("OutboundLink")],1)])]),a._v(" "),r("li",[r("p",[r("a",{attrs:{href:"https://myfjdthink.com/2016/03/22/node-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/",target:"_blank",rel:"noopener noreferrer"}},[a._v("Node 性能优化"),r("OutboundLink")],1)])]),a._v(" "),r("li",[r("p",[r("a",{attrs:{href:"http://alinode.aliyun.com/blog/37",target:"_blank",rel:"noopener noreferrer"}},[a._v("解读 V8 GC Log（一）: Node.js 应用背景与 GC 基础知识"),r("OutboundLink")],1)])]),a._v(" "),r("li",[r("p",[r("a",{attrs:{href:"http://huang-jerryc.com/2016/04/14/NodeJS%E4%B8%AD%E8%A2%AB%E5%BF%BD%E7%95%A5%E7%9A%84%E5%86%85%E5%AD%98/",target:"_blank",rel:"noopener noreferrer"}},[a._v("NodeJS中被忽略的内存"),r("OutboundLink")],1)])]),a._v(" "),r("li",[r("p",[r("a",{attrs:{href:"http://leanote.com/blog/post/59128586ab644166f800ab45",target:"_blank",rel:"noopener noreferrer"}},[a._v("前端基础进阶（一）：内存空间详细图解"),r("OutboundLink")],1)])]),a._v(" "),r("li",[r("p",[r("a",{attrs:{href:"http://www.php.cn/js-tutorial-351911.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("前端基础进阶（二）：执行上下文详细图解"),r("OutboundLink")],1)])]),a._v(" "),r("li",[r("p",[r("a",{attrs:{href:"https://rawbin-.github.io/web%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/javascript/2017/05/08/js-memory-management/",target:"_blank",rel:"noopener noreferrer"}},[a._v("JavaScript 内存模型"),r("OutboundLink")],1)])])])])}),[],!1,null,null,null);r.default=s.exports}}]);