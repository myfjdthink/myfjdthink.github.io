(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{637:function(s,a,n){"use strict";n.r(a);var e=n(2),t=Object(e.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"基于-async-hook-实现的-koa-国际化解决方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基于-async-hook-实现的-koa-国际化解决方案"}},[s._v("#")]),s._v(" 基于 async-hook 实现的 koa 国际化解决方案")]),s._v(" "),a("ul",[a("li",[a("p",[a("a",{attrs:{href:""}},[s._v("前言")])])]),s._v(" "),a("li",[a("p",[a("a",{attrs:{href:""}},[s._v("koa 的 mvc 结构")])])]),s._v(" "),a("li",[a("p",[a("a",{attrs:{href:""}},[s._v("eggjs 的结构反转方案")])])]),s._v(" "),a("li",[a("p",[a("a",{attrs:{href:""}},[s._v("获取调用链")])])]),s._v(" "),a("li",[a("p",[a("a",{attrs:{href:""}},[s._v("Java 的 Threadlocal")])])]),s._v(" "),a("li",[a("p",[a("a",{attrs:{href:""}},[s._v("Node.js 的 async-hooks")])])]),s._v(" "),a("li",[a("p",[a("a",{attrs:{href:""}},[s._v("国际化的最终实现方案")])])])]),s._v(" "),a("h2",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[s._v("#")]),s._v(" 前言")]),s._v(" "),a("p",[s._v("在 koa 上实现国际化，有个现成的工具包 "),a("a",{attrs:{href:"https://github.com/koajs/locales",target:"_blank",rel:"noopener noreferrer"}},[s._v("koa-locales"),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("简单配置一下就可以使用了")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("async function home(ctx) {\n  ctx.body = {\n    message: ctx.__('Hello, %s', 'fengmk2'),\n  };\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("但是这里有个问题，想要获得国际化的内容，就必须访问 ctx 对象(request 里附带了用户所使用的的语言信息)，这里的访问就成了问题。")]),s._v(" "),a("h2",{attrs:{id:"koa-的-mvc-结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#koa-的-mvc-结构"}},[s._v("#")]),s._v(" koa 的 mvc 结构")]),s._v(" "),a("p",[s._v("一般来说，基于 koa 的应用会采用经典的 mvc 结构, 一个用户请求进来，其调用链是这样的。")]),s._v(" "),a("blockquote",[a("p",[s._v("router")]),s._v(" "),a("p",[s._v("--\x3econtroller")]),s._v(" "),a("p",[s._v("----\x3eservice")]),s._v(" "),a("p",[s._v("------\x3emodel")])]),s._v(" "),a("p",[s._v("如果我们要在 service 层或者 model 层访问 koa 的 ctx 对象，就需要在调用过程把参数一层一层传递下去：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("async function home(ctx) {\n  ctx.body = service.hello(ctx)\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function hello(ctx) {\n  ctx.__(xxx)\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("这是一件非常恶心的事情。")]),s._v(" "),a("p",[s._v("那要怎么解决这个问题呢？")]),s._v(" "),a("h2",{attrs:{id:"eggjs-的结构反转方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#eggjs-的结构反转方案"}},[s._v("#")]),s._v(" eggjs 的结构反转方案")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://eggjs.github.io/zh/",target:"_blank",rel:"noopener noreferrer"}},[s._v("eggjs"),a("OutboundLink")],1),s._v(" 采用了结构翻转的设计，当用户请求进来时，初始化 controller 和 service 等对象，挂载在 ctx 上。")]),s._v(" "),a("blockquote",[a("p",[s._v("ctx 对象几乎可以在编写应用时的任何一个地方获取到.")]),s._v(" "),a("p",[s._v("在 Controller、Service 等可以通过 this.app，或者所有 Context 对象上的 ctx.app：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// app/controller/home.js\nclass HomeController extends Controller {\n  async index() {\n    // 从 `Controller/Service` 基类继承的属性： `this.app`\n    console.log(this.app.config.name);\n    // 从 ctx 对象上获取\n    console.log(this.ctx.app.config.name);\n  }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("eggjs 根本没有传递 ctx，而是所有东西都挂载在 ctx 上，所以 eggjs 这里的国际化就很好做了。")]),s._v(" "),a("p",[s._v("其实这个也是我不考虑使用 eggjs 的一个重要原因，"),a("strong",[s._v("这种设计模式打破的 function 简单的特性")]),s._v("。普通的 function 参数即是输入，返回值即是输出，这种特性是非常好写 Unit Test 的。")]),s._v(" "),a("p",[s._v("而在 function 里访问 this.xxx 这个方式，就意味着能访问的对象取决于上下文而非函数的参数，这会给测试带来灾难，你需要联系上下文才能知道 this 里面究竟有什么。")]),s._v(" "),a("p",[s._v("当然 eggjs 里面只是往 this.ctx 挂载类似静态类的实现，并没有保存变量，一定程度上避免了混乱的问题，不过开了这个头，就容易走歪了。")]),s._v(" "),a("h2",{attrs:{id:"获取调用链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#获取调用链"}},[s._v("#")]),s._v(" 获取调用链")]),s._v(" "),a("p",[s._v("其他语言是如何解决这个问题的呢？")]),s._v(" "),a("h3",{attrs:{id:"java-的-threadlocal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java-的-threadlocal"}},[s._v("#")]),s._v(" Java 的 Threadlocal")]),s._v(" "),a("p",[s._v("Java 的解决方案是 Threadlocal, 在 J2EE 中，用户的每个请求都会非配给一个线程，Java 提供了 Threadlocal 这样一个关于创建线程局部变量的类。通常情况下，我们创建的变量是可以被任何一个线程访问并修改的。而使用ThreadLocal创建的变量只能被当前线程访问，其他线程则无法访问和修改。")]),s._v(" "),a("blockquote",[a("p",[s._v("一个请求绑定一个线程，一个线程绑定一个变量。")])]),s._v(" "),a("p",[s._v("有了这个特性，Java 的 Web 框架一般会在线程初始化之后，把 Session 写入 Threadlocal，然后在任意一处代码中都能访问到同一个 Session。")]),s._v(" "),a("h3",{attrs:{id:"node-js-的-async-hooks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-js-的-async-hooks"}},[s._v("#")]),s._v(" Node.js 的 async-hooks")]),s._v(" "),a("p",[s._v("好消息是 Node 世界里也有类似 Java 的 Threadlocal 实现，就是 "),a("a",{attrs:{href:"https://nodejs.org/api/async_hooks.html#async_hooks_async_hooks",target:"_blank",rel:"noopener noreferrer"}},[s._v("Async Hooks"),a("OutboundLink")],1),s._v("。")]),s._v(" "),a("p",[a("strong",[s._v("注意 async_hooks 目前还是实验性特性！而且已经实验了 2 年多还没转正！")])]),s._v(" "),a("p",[s._v("Async hook 对每一个函数（不论异步还是同步）提供了一个 Async scope，你可以通过 async_hooks.currentId() 获取当前函数的 Async ID。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const async_hooks = require('async_hooks');\n\nconsole.log('default Async Id', async_hooks.currentId()); // 1\n\nprocess.nextTick(() => {\n  console.log('nextTick Async Id', async_hooks.currentId()); // 5\n  test();\n});\n\nfunction test () {\n  console.log('nextTick Async Id', async_hooks.currentId()); // 5\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("在同一个 Async scope 中，你会拿到相同的 Async ID。")]),s._v(" "),a("p",[s._v("基于这个特性，我们就能追踪一个用户请求触发的所有异步操作了。")]),s._v(" "),a("h2",{attrs:{id:"国际化的最终实现方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#国际化的最终实现方案"}},[s._v("#")]),s._v(" 国际化的最终实现方案")]),s._v(" "),a("p",[s._v("OK，既然技术上可行，那我们就可以给出具体实现了。")]),s._v(" "),a("ol",[a("li",[s._v("使用 koa-locales 实现多语言配置文件的解析，和用户语言的识别。")]),s._v(" "),a("li",[s._v("把 koa-locales 里进行文本翻译的方法抽成工具类")]),s._v(" "),a("li",[s._v("编写一个过滤器，把用户语言与 async_hooks 的 Async ID 绑定")]),s._v(" "),a("li",[s._v("在 service 层代码中调用工具类，工具类通过 Async ID 获取当前用户的语言，进行文本翻译。\napp.ts 注册")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const koa = new Koa()\n// 国际化\ninitI18n(koa, {\n  // dirs: ['$PWD/locales'],\n  functionName: 'i18n',\n  defaultLocale: 'zh-CN'\n})\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("I18nUtil.ts 工具类")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import * as locales from 'koa-locales'\nimport {logger} from '@akajs/utils'\nimport {createNamespace} from 'cls-hooked'\n\nconst session = createNamespace('i18n locale')\n\nlet defaultLocale = 'zh-CN'\n\n// 把 koa-locales 的文本翻译方法抽出来\nlet gettext = function (locale: string, key: string, ...values) {\n  // 等待被覆盖\n  return key\n}\n\n// 新的文本翻译方法，给 Service 层调用\nexport function i18n (key?: string, ...values: Array<any>) {\n  // get locale\n  logger.debug('locale form namespace ', session.get('locale'))\n  let locale = session.get('locale') || defaultLocale\n  return gettext(locale, key, ...values)\n}\n\nexport function initI18n (app, options) {\n  locales(app, options)\n  app.use(async (ctx, next) => new Promise(\n    session.bind(async (resolve, reject) => {\n      try {\n        let locale = ctx.__getLocale()\n        logger.debug('locale ', locale)\n        session.set('locale', locale)\n        await next()\n        resolve()\n      } catch (err) {\n        reject(err)\n      }\n    })\n  ))\n  gettext = app[options.functionName || '__']\n  defaultLocale = options.defaultLocale\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br")])]),a("p",[s._v("UserService.ts 在 Service 中使用 i18n")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("async register (value: RegisterDto) {\n    throw new BizError(i18n('Phone %s Used', phone))\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("最终，我们可以在任意代码中引入 I18nUtil.ts 工具类，就可以准确获取用户当前语言了, 实际上是为每个用户请求建立一个 Session：")]),s._v(" "),a("blockquote",[a("p",[s._v("用户发起请求 --\x3e 中间件保存用户语言到 session --\x3e Service --\x3e I18nUtil get 用户语言 from session。")])]),s._v(" "),a("p",[s._v("解析：最终的实现方案中，我们并没有直接使用 async_hooks 特性，而是用了 "),a("a",{attrs:{href:"https://github.com/Jeff-Lewis/cls-hooked",target:"_blank",rel:"noopener noreferrer"}},[s._v("cls-hooked"),a("OutboundLink")],1),s._v(" 这个包提升了易用性和兼容性，"),a("a",{attrs:{href:"https://github.com/midwayjs/pandora",target:"_blank",rel:"noopener noreferrer"}},[s._v("Pandora.js"),a("OutboundLink")],1),s._v(" 还使用这个包来做 Node 应用的调用链记录，有兴趣的可以了解下。")])])}),[],!1,null,null,null);a.default=t.exports}}]);