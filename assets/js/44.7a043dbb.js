(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{333:function(t,a,e){t.exports=e.p+"assets/img/iceberg_file_list.e18423da.png"},662:function(t,a,e){"use strict";e.r(a);var s=e(2),r=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"iceberg-性能优化方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#iceberg-性能优化方案"}},[t._v("#")]),t._v(" Iceberg 性能优化方案")]),t._v(" "),a("p",[t._v("Iceberg 是一个开源的数据表格管理库，它可以通过 metadata 上的 static 信息有效地过滤数据，减少底层数据的扫描量。除此之外，我们还可以有更多的方式来优化查询，例如 Bloom Filter Index 和 Order 排序。")]),t._v(" "),a("p",[t._v("为了深入理解其优化原理，我们需要对 Iceberg 的数据结构和查询生命周期有基本了解。")]),t._v(" "),a("h2",{attrs:{id:"iceberg-数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#iceberg-数据结构"}},[t._v("#")]),t._v(" Iceberg 数据结构")]),t._v(" "),a("p",[t._v("Iceberg 的整体数据结构包括 data files、manifest file、manifest list file、metadata file 和 catalog。其中 manifest file 可以索引多个 data files，并记录静态信息如 min max value 等；而 manifest list file 则是一个快照一个 manifest 文件列表，并用于区分不同分区。metadata 文件则用于版本控制。")]),t._v(" "),a("p",[t._v("在磁盘上文件列表示例：")]),t._v(" "),a("p",[a("img",{attrs:{src:e(333),alt:"iceberg_file_list.png"}})]),t._v(" "),a("h2",{attrs:{id:"iceberg-查询生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#iceberg-查询生命周期"}},[t._v("#")]),t._v(" Iceberg 查询生命周期")]),t._v(" "),a("p",[t._v("假设我们执行以下查询：")]),t._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" orders\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" order_ts "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("BETWEEN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2021-06-01 10:00:00'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2022-05-3110:00:00'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" amount "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("其执行流程如下：")]),t._v(" "),a("ol",[a("li",[t._v("确定 catalog，默认是 default。")]),t._v(" "),a("li",[t._v("确定 table name 是 orders。")]),t._v(" "),a("li",[t._v("确定 snapshot version，默认是最新 version。")]),t._v(" "),a("li",[t._v("确定 partition："),a("code",[t._v("BETWEEN '2021-06-01 10:00:00' and '2022-05-3110:00:00'")]),t._v("。")]),t._v(" "),a("li",[t._v("根据 manifest 文件记录每个 data file 中 amount 的 min max value 进行过滤。")])]),t._v(" "),a("p",[t._v("这一系列过滤大大减少了内存中加载的数量并加速了查询。")]),t._v(" "),a("h2",{attrs:{id:"bloom-filter-index"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bloom-filter-index"}},[t._v("#")]),t._v(" Bloom Filter Index")]),t._v(" "),a("p",[t._v("如果使用 parquet 或 orc 数据格式，则可利用 bloom filter 快速判断元素是否存在从而跳过扫描该 data file。适合唯一性高字段（如 id）添加 bloom filter；反之像城市名或省份名等区分度低字段则不适合添加 bloom filter。在 Trino 中建表时配置 "),a("code",[t._v("orc_bloom_filter_columns")]),t._v(" 和 "),a("code",[t._v("orc_bloom_filter_fpp")]),t._v(" 即可使用该功能。")]),t._v(" "),a("p",[t._v("实测结果显示：bloom filter 普遍能带来三倍左右的查询速度提升。")]),t._v(" "),a("h3",{attrs:{id:"order-排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#order-排序"}},[t._v("#")]),t._v(" Order 排序")]),t._v(" "),a("p",[t._v("Trino 目前还不支持写入时对数据进行排序操作，在 Trino 写入后每个 datafile 内容都会乱序导致 min max value 过滤效果变差。因此，在 Trino 解决这个问题之前，我们可以通过 Spark 对已有数据做 rewrite 排序操作：")]),t._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("spark"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sql"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"CALL footprint.system.rewrite_data_files(table => 'catalog_name.table_name', strategy => 'sort', sort_order => 'amount DESC')\"")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("注意事项：")]),t._v(" "),a("ul",[a("li",[t._v("Order 字段应选择用户最常用的过滤字段；")]),t._v(" "),a("li",[t._v("在单个 partition 中含有多个 datafile 更明显；")]),t._v(" "),a("li",[t._v("应调整 partition 大小或者降低单文件大小以获得更好效果；")])]),t._v(" "),a("p",[t._v("实测结果显示：设置好 Order 普遍能带来十倍左右的查询速度提升。")]),t._v(" "),a("h3",{attrs:{id:"z-order"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#z-order"}},[t._v("#")]),t._v(" Z-order")]),t._v(" "),a("p",[t._v("Z-order 结构可以同时对多个字段进行排序操作, 可以通过 Spark 对已有数据做 rewrite 排序操作:")]),t._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("spark"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sql"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"CALL footprint.system.rewrite_data_files(table => 'catalog_name.table_name', strategy => 'sort', sort_order => 'zorder(amount, product_name)')\"")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("实测结果显示：设置好 Z-order 普遍能带来三倍左右的查询速度提升。")]),t._v(" "),a("h2",{attrs:{id:"snapshot-清理与小文件合并"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#snapshot-清理与小文件合并"}},[t._v("#")]),t._v(" Snapshot 清理与小文件合并")]),t._v(" "),a("p",[t._v("频繁往 Iceberg 写入数据会产生很多小文件影响到性能, 同样也会导致 Snapshot 版本太多影响到性能; 因此需要周期性清理无用Snapshot 并且将小文件合并成较大块.")]),t._v(" "),a("p",[t._v("以上就是针对 iceberg 性能优化方案介绍及说明")])])}),[],!1,null,null,null);a.default=r.exports}}]);