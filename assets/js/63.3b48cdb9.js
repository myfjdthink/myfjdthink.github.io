(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{617:function(e,s,t){"use strict";t.r(s);var o=t(2),n=Object(o.a)({},(function(){var e=this,s=e._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"使用-winston-处理-node-应用-log"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-winston-处理-node-应用-log"}},[e._v("#")]),e._v(" 使用 Winston 处理 Node 应用 Log")]),e._v(" "),s("h1",{attrs:{id:"使用-winston-处理-node-应用-log-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-winston-处理-node-应用-log-2"}},[e._v("#")]),e._v(" 使用 Winston 处理 Node 应用 Log")]),e._v(" "),s("h2",{attrs:{id:"问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#问题"}},[e._v("#")]),e._v(" 问题")]),e._v(" "),s("p",[e._v("随着 Node 应用节点增多，应用部署在多台机器上，查询 Node 的 log 变得非常麻烦。业内通常的解决方案是使用 ELK 套件来收集并处理 log，可以方便地查询。关于 ELK，可以看看这篇文章："),s("a",{attrs:{href:"https://www.ibm.com/developerworks/cn/opensource/os-cn-elk/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://www.ibm.com/developerworks/cn/opensource/os-cn-elk/"),s("OutboundLink")],1),e._v("，本文不作介绍~。")]),e._v(" "),s("p",[e._v("在推动使用 ELK 的过程中碰到一些问题：")]),e._v(" "),s("ol",[s("li",[e._v("之前的代码中很多地方直接是使用 console.log 输出 log 的。这些 log 之前是依赖于 pm2 处理并写入到文件中。")]),e._v(" "),s("li",[e._v("如果 log 一个 object 对象的话，默认的输出效果是多行的，ELK 在收集会比较麻烦。")])]),e._v(" "),s("blockquote",[s("p",[e._v("amount: 23, products: [ { product_id: ‘55c31e936f227ed922c508aa’,")]),e._v(" "),s("p",[e._v("num: 23,")]),e._v(" "),s("p",[e._v("rebuyType: 1,")]),e._v(" "),s("p",[e._v("price: 1 } ],")])]),e._v(" "),s("h2",{attrs:{id:"初步的解决方案"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#初步的解决方案"}},[e._v("#")]),e._v(" 初步的解决方案")]),e._v(" "),s("p",[e._v("问题1：全局搜索并替换 console.log 的内容，使用新的 log 工具是可以的。")]),e._v(" "),s("p",[e._v("问题2：ELK 中的 Logstash 提供了一个多行文件的过滤器，"),s("a",{attrs:{href:"https://www.elastic.co/guide/en/logstash/5.0/plugins-filters-multiline.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://www.elastic.co/guide/en/logstash/5.0/plugins-filters-multiline.html"),s("OutboundLink")],1),e._v(" ，这个过滤器可以把多行 log 合并为一条记录，但是它要求使用正则来判断哪些多行 log 是属于一行的内容，这是个难点。")]),e._v(" "),s("h2",{attrs:{id:"最终解决方案"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#最终解决方案"}},[e._v("#")]),e._v(" 最终解决方案")]),e._v(" "),s("p",[e._v("上述的方案实施起来都不怎么好看，可以考虑使用 "),s("a",{attrs:{href:"https://github.com/winstonjs/winston#using-the-default-logger",target:"_blank",rel:"noopener noreferrer"}},[e._v("Winston"),s("OutboundLink")],1),e._v(" 这个Node 的 log 库。")]),e._v(" "),s("h3",{attrs:{id:"引入-winston"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#引入-winston"}},[e._v("#")]),e._v(" 引入 Winston")]),e._v(" "),s("p",[e._v("WinstonLog.js")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("var winston = require('winston');var customLogger = new winston.Logger();// A console transport logging debug and above.customLogger.add(winston.transports.Console, {  timestamp: function() {    return Date.now();  },  level: 'verbose',  colorize: true});// A file based transport logging only errors formatted as json.customLogger.add(winston.transports.File, {  level: 'verbose',  filename: 'winston.log',  json: true});module.exports = customLogger\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("这是个 Winston 配置的 demo，要找到合适你项目的 Winston 的配置方式可以查看 Winston 文档。")]),e._v(" "),s("p",[e._v("回到这个配置文件，重点在 winston.transports.File 的配置：")]),e._v(" "),s("p",[s("code",[e._v("json: true")])]),e._v(" "),s("p",[e._v("这样写入 log 文件里的内容都是 json 对象了，winston.log 的部分内容是这样的：")]),e._v(" "),s("blockquote",[s("p",[e._v("{“level”:”info”,”message”:”getRateMap”,”timestamp”:”2016-11-16T04:31:55.882Z”}")]),e._v(" "),s("p",[e._v("{“level”:”info”,”message”:”defaultRateUp get")]),e._v(" "),s("p",[e._v("map”,”timestamp”:”2016-11-16T04:31:55.883Z”}")]),e._v(" "),s("p",[e._v("{“level”:”info”,”message”:”each products { quota: 20000,\\n name:")]),e._v(" "),s("p",[e._v("”,\\n term: 1,\\n type: 2,\\n description: ”,\\n id:")]),e._v(" "),s("p",[e._v("‘549922452238c54e98b750bc’,\\n rate_year: null,\\n product_id:")]),e._v(" "),s("p",[e._v("‘549922452238c54e98b750bc’,\\n _id: ‘549922452238c54e98b750bc’,\\n")]),e._v(" "),s("p",[e._v("rate: null,\\n rate_up: 0 }”,”timestamp”:”2016-11-16T04:31:55.884Z”}")])]),e._v(" "),s("p",[e._v("可以看到，每一行都是一个 json，结构是：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("{“level” : “”，“message” ： “****”}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("这样ELK 在收集 log 就会很方便了。")]),e._v(" "),s("p",[e._v("而配置中 winston.transports.Console 里是没有 json: true 的配置项的，所以我们在命令行里看到的 log 还是换行的，比较适合阅读。")]),e._v(" "),s("h3",{attrs:{id:"替换项目中的-log"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#替换项目中的-log"}},[e._v("#")]),e._v(" 替换项目中的 log")]),e._v(" "),s("h4",{attrs:{id:"console-log"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#console-log"}},[e._v("#")]),e._v(" console.log")]),e._v(" "),s("p",[e._v("搞定了log 文件格式的问题，我们还需要把项目里的 console.log 替换为 Winston 的 log。")]),e._v(" "),s("p",[e._v("可以在应用的启动位置 app.js 添加如下内容：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("var winston = require('./api/lib/WinstonLog')console.log = winston.infoconsole.error = winston.error\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("这样就把 console.log 的实现替换了。")]),e._v(" "),s("h4",{attrs:{id:"web-框架默认的-log"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#web-框架默认的-log"}},[e._v("#")]),e._v(" web 框架默认的 log")]),e._v(" "),s("p",[e._v("因为这边使用的是 sails 这个 web 框架，所以这里讲一下 sails 里如何替换 log 的实现。")]),e._v(" "),s("p",[e._v("sails 默认集成的 log 库是 "),s("a",{attrs:{href:"https://github.com/balderdashy/captains-log",target:"_blank",rel:"noopener noreferrer"}},[e._v("captains-log"),s("OutboundLink")],1),e._v(" ，那如何替换成 Winston 呢？sails 的官方文档其实已经给了方法了~~~， 见"),s("a",{attrs:{href:"http://sailsjs.org/documentation/reference/configuration/sails-config-log",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://sailsjs.org/documentation/reference/configuration/sails-config-log"),s("OutboundLink")],1)]),e._v(" "),s("p",[e._v("修改 log 配置")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// config/log.jsvar customLogger = require('../api/lib/WinstonLog')module.exports.log = {  // Pass in our custom logger, and pass all log levels through.  custom: customLogger,  level: 'verbose',  // Disable captain's log so it doesn't prefix or stringify our meta data.  inspect: false};\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("用刚刚引入的 Winston 对象注入到 sails 的 log 配置里就可以啦。")])])}),[],!1,null,null,null);s.default=n.exports}}]);