(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{499:function(e,t,r){e.exports=r.p+"assets/img/904a5ec4b27483aee51c03c8557bd4d5.904a5ec4.png"},500:function(e,t,r){e.exports=r.p+"assets/img/0ec340f33fb2b4dbdf558449107cca8e.0ec340f3.png"},501:function(e,t,r){e.exports=r.p+"assets/img/0e7bf2db484f18f3ca373bd0773ffab8.0e7bf2db.png"},502:function(e,t,r){e.exports=r.p+"assets/img/84e47db0ce05a2ca9a3ecb06317b5adb.84e47db0.png"},503:function(e,t,r){e.exports=r.p+"assets/img/372d7d3fb6da14098b5b63245401c814.372d7d3f.png"},504:function(e,t,r){e.exports=r.p+"assets/img/cb84372097b3e35cb9a1d48c24d56fcf.cb843720.png"},505:function(e,t,r){e.exports=r.p+"assets/img/03bdb5f6de728bdb76dbb9a003b62263.03bdb5f6.png"},506:function(e,t,r){e.exports=r.p+"assets/img/0185a2a404942f2aec01b6933a87f909.0185a2a4.png"},507:function(e,t,r){e.exports=r.p+"assets/img/bd47c8d112f60f5e91e3aab6bd7679dc.bd47c8d1.png"},508:function(e,t,r){e.exports=r.p+"assets/img/8f712541c80eb2f3d13b408e62031575.8f712541.png"},509:function(e,t,r){e.exports=r.p+"assets/img/5d3cf3ad2988beee45dc45f82427fd6e.5d3cf3ad.png"},510:function(e,t,r){e.exports=r.p+"assets/img/fe0338fc565e48553b3c8622a369bd36.fe0338fc.png"},511:function(e,t,r){e.exports=r.p+"assets/img/c75c392145f3f39bd9042edce786e256.c75c3921.png"},512:function(e,t,r){e.exports=r.p+"assets/img/1572f7e930ce0fc442ae21ac5e2de455.1572f7e9.png"},513:function(e,t,r){e.exports=r.p+"assets/img/5176d2f8527054aac3e7106487090d80.5176d2f8.png"},514:function(e,t,r){e.exports=r.p+"assets/img/be9bfa387db52c4eaeb235c7a7a01945.be9bfa38.png"},515:function(e,t,r){e.exports=r.p+"assets/img/4123d50c20385fa9300b32e039a6894a.4123d50c.png"},516:function(e,t,r){e.exports=r.p+"assets/img/8b69728340e60bc09d05422a21a85977.8b697283.png"},517:function(e,t,r){e.exports=r.p+"assets/img/e0d7a41c3390fbaf08c9520c5a6be80b.e0d7a41c.png"},518:function(e,t,r){e.exports=r.p+"assets/img/1b1793a797651edd432a7d15b9af2b46.1b1793a7.png"},519:function(e,t,r){e.exports=r.p+"assets/img/0212a2ab8c82fe4469ccf48f761d4752.0212a2ab.png"},642:function(e,t,r){"use strict";r.r(t);var a=r(2),v=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"未来已来-云原生-cloud-native"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#未来已来-云原生-cloud-native"}},[e._v("#")]),e._v(" 未来已来：云原生 Cloud Native")]),e._v(" "),t("ul",[t("li",[t("p",[t("a",{attrs:{href:""}},[e._v("前言")])])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:""}},[e._v("后端架构演化史")])])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:""}},[e._v("集中式架构")])])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:""}},[e._v("分布式系统架构")])])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:""}},[e._v("容器技术新纪元 Docker")])])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:""}},[e._v("微服务架构")])])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:""}},[e._v("Kubernetes")])])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:""}},[e._v("Service Mesh")])])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:""}},[e._v("总结")])])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:""}},[e._v("云原生 Cloud Native")])])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:""}},[e._v("什么是云 Cloud")])])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:""}},[e._v("什么是原生 Native")])])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:""}},[e._v("Cloud Native 是道，Service Mesh 是术")])])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:""}},[e._v("Service Mesh")])])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:""}},[e._v("纷争 2017")])])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:""}},[e._v("百家争鸣 2018")])])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:""}},[e._v("持续发展 2019")])])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:""}},[e._v("Istio")])])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:""}},[e._v("连接")])])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:""}},[e._v("保护")])])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:""}},[e._v("控制")])])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:""}},[e._v("观测")])])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:""}},[e._v("总结")])])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:""}},[e._v("学习资料/指引")])])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:""}},[e._v("参考资料")])])])]),e._v(" "),t("h2",{attrs:{id:"前言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[e._v("#")]),e._v(" 前言")]),e._v(" "),t("p",[e._v("自 2013 年容器（虚拟）技术（Docker）成熟后，后端的架构方式进入快速迭代的阶段，出现了很多新兴概念：")]),e._v(" "),t("ul",[t("li",[e._v("微服务")]),e._v(" "),t("li",[e._v("k8s")]),e._v(" "),t("li",[e._v("Serverless")]),e._v(" "),t("li",[e._v("IaaS：基础设施服务，Infrastructure-as-a-service")]),e._v(" "),t("li",[e._v("PaaS：平台服务，Platform-as-a-service")]),e._v(" "),t("li",[e._v("SaaS：软件服务，Software-as-a-service")]),e._v(" "),t("li",[e._v("Cloud Native： 云原生")]),e._v(" "),t("li",[e._v("Service Mesh\n后端架构的变迁和云计算的发展密切相关，架构其实在不断地适应云计算，特别是云原生，被誉为未来架构，在 2019 年，云原生落地方案 Service Mesh 在国内外全面开花，我认为，未来已来。")])]),e._v(" "),t("p",[e._v("接下来，我们将：")]),e._v(" "),t("ul",[t("li",[e._v("梳理后端架构演化史，回顾后端架构发展历程；")]),e._v(" "),t("li",[e._v("回顾云服务发展历程，探讨云原生概念；")]),e._v(" "),t("li",[e._v("梳理云原生实现方案 Service Mesh 的发展历程；")]),e._v(" "),t("li",[e._v("介绍 Service Mesh 的代表 Istio 的亮眼功能；")])]),e._v(" "),t("h2",{attrs:{id:"后端架构演化史"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#后端架构演化史"}},[e._v("#")]),e._v(" 后端架构演化史")]),e._v(" "),t("h3",{attrs:{id:"集中式架构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#集中式架构"}},[e._v("#")]),e._v(" 集中式架构")]),e._v(" "),t("p",[e._v("集中式架构又叫单体式架构，在Web2.0模式并未大规模兴起时十分流行。后来，基于Web应用的B/S（Browser/Server）架构逐渐取代了基于桌面应用的C/S（Client/Server）架构。B/S架构的后端系统大都采用集中式架构，它当时以优雅的分层设计，统一了服务器后端的开发领域。")]),e._v(" "),t("p",[e._v("集中式应用分为标准的3层架构模型："),t("strong",[e._v("数据访问层M、服务层V和逻辑控制层C")]),e._v("。每个层之间既可以共享领域模型对象，也可以进行更加细致的拆分。")]),e._v(" "),t("p",[e._v("其缺点是")]),e._v(" "),t("ul",[t("li",[e._v("编译时间过长;")]),e._v(" "),t("li",[e._v("回归测试周期过长;")]),e._v(" "),t("li",[e._v("开发效率降低等；")]),e._v(" "),t("li",[e._v("不利于更新技术框架")])]),e._v(" "),t("h3",{attrs:{id:"分布式系统架构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分布式系统架构"}},[e._v("#")]),e._v(" 分布式系统架构")]),e._v(" "),t("p",[e._v("对于互联网应用规模的迅速增长，集中式架构并无法做到无限制的提升系统的吞吐量，而分布式系统架构在理论上为吞吐量的上升提供了无限扩展的可能。因此，用于搭建互联网应用的服务器也渐渐地放弃了昂贵的小型机，转而采用大量的廉价PC服务器。")]),e._v(" "),t("h3",{attrs:{id:"容器技术新纪元-docker"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#容器技术新纪元-docker"}},[e._v("#")]),e._v(" 容器技术新纪元 Docker")]),e._v(" "),t("p",[e._v("分布式架构的概念很早就出现，阻碍其落地的最大问题是容器技术不成熟，应用程序在云平台运行，仍然需要为不同的开发语言安装相应的运行时环境。虽然自动化运维工具可以降低环境搭建的复杂度，但仍然不能从根本上解决环境的问题。")]),e._v(" "),t("p",[e._v("Docker的出现成为了软件开发行业新的分水岭；容器技术的成熟，也标志技术新纪元的开启。Docker让开发工程师可以将他们的应用和依赖封装到一个可移植的容器中。就像当年智能手机的出现改变了整个手机行业的游戏规则一样，Docker也大有席卷整个软件行业，并且进而改变行业游戏规则的趋势。通过集装箱式的封装，开发和运维都以标准化的方式发布的应用，异构语言不再是桎梏团队的枷锁。")]),e._v(" "),t("p",[e._v("在 Docker 之后，微服务得以流行开来")]),e._v(" "),t("h3",{attrs:{id:"微服务架构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#微服务架构"}},[e._v("#")]),e._v(" 微服务架构")]),e._v(" "),t("p",[e._v("微服务架构风格是一种将一个单一应用程序开发为一组小型服务的方法，每个服务运行在自己的进程中，服务间通信采用轻量级通信机制(通常用HTTP资源API)。这些服务围绕业务能力构建并且可通过全自动部署机制独立部署。这些服务共用一个最小型的集中式的管理，服务可用不同的语言开发，使用不同的数据存储技术。")]),e._v(" "),t("p",[t("strong",[e._v("微服务优势")])]),e._v(" "),t("ul",[t("li",[e._v("可扩展")]),e._v(" "),t("li",[e._v("可升级")]),e._v(" "),t("li",[e._v("易维护")]),e._v(" "),t("li",[e._v("故障和资源的隔离\n"),t("strong",[e._v("微服务的问题")])])]),e._v(" "),t("p",[e._v("但是，世界上没有完美无缺的事物，微服务也是一样。著名软件大师，被认为是十大软件架构师之一的 Chris Richardson 曾一针见血地指出：“微服务应用是分布式系统，由此会带来固有的复杂性。开发者需要在 RPC 或者消息传递之间选择并完成进程间通讯机制。此外，他们必须写代码来处理消息传递中速度过慢或者不可用等局部失效问题。”")]),e._v(" "),t("p",[e._v("在微服务架构中，一般要处理以下几类问题：")]),e._v(" "),t("ul",[t("li",[e._v("服务治理：弹性伸缩，故障隔离")]),e._v(" "),t("li",[e._v("流量控制：路由，熔断，限速")]),e._v(" "),t("li",[e._v("应用观测：指标度量、链式追踪\n"),t("strong",[e._v("解决方案 Spring Cloud（Netflix OSS）")])])]),e._v(" "),t("p",[e._v("这是一个典型的微服务架构图")]),e._v(" "),t("p",[t("img",{attrs:{src:r(499),alt:"904a5ec4b27483aee51c03c8557bd4d5.png"}})]),e._v(" "),t("p",[e._v("Spring Cloud 体系提供了服务发现、负载均衡、失效转移、动态扩容、数据分片、调用链路监控等分布式系统的核心功能，一度成为微服务的最佳实践。")]),e._v(" "),t("p",[t("strong",[e._v("Spring Cloud 的问题")])]),e._v(" "),t("blockquote",[t("p",[e._v("如果开始构建微服务的方法，肯定容易被 Netflix OSS/Java/Spring/SpringCloud 所吸引。但是要知道你不是Netflix，也不需要直接使用 AWS EC2，使得应用程序变得很复杂。如今使用 docker 和采用 memos/kubernetes 是明智之举，它们已经具备大量的分布式系统特性。在应用层进行分层，是因为 netflix 5年前面临的问题，而不得不这样做（可以说如果那时有了kubernetes，netflix OSS栈会大不相同）。")]),e._v(" "),t("p",[e._v("因此，建议谨慎选择，按需选择，避免给应用程序带来不必要的复杂度。")])]),e._v(" "),t("p",[e._v("的确 SpringCloud 方案看起来很美好，但是它具有非常强的侵入性，应用代码中会包含大量的 SpringCloud 模块，而且对其他编程语言也不友好。")]),e._v(" "),t("h3",{attrs:{id:"kubernetes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#kubernetes"}},[e._v("#")]),e._v(" Kubernetes")]),e._v(" "),t("p",[e._v("Kubernetes 出现就是为了解决 SpringCloud 的问题，不侵入应用层，在容器层解决问题。")]),e._v(" "),t("p",[t("strong",[e._v("Kubernetes 起源")])]),e._v(" "),t("p",[e._v("Kubernetes最初源于谷歌内部的Borg，提供了面向应用的容器集群部署和管理系统。")]),e._v(" "),t("p",[e._v("Kubernetes的目标旨在消除编排物理/虚拟计算，网络和存储基础设施的负担，并使应用程序运营商和开发人员完全将重点放在以容器为中心的原语上进行自助运营。")]),e._v(" "),t("p",[e._v("Kubernetes 也提供稳定、兼容的基础（平台），用于构建定制化的 workflows 和更高级的自动化任务。 Kubernetes 具备完善的集群管理能力，包括多层次的安全防护和准入机制、多租户应用支撑能力、"),t("strong",[e._v("透明的服务注册和服务发现机制、内建负载均衡器、故障发现和自我修复能力、服务滚动升级和在线扩容、可扩展的资源自动调度机制、多粒度的资源配额管理能力")]),e._v("。")]),e._v(" "),t("p",[e._v("Kubernetes 还提供完善的管理工具，涵盖开发、部署测试、运维监控等各个环节。")]),e._v(" "),t("h3",{attrs:{id:"service-mesh"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#service-mesh"}},[e._v("#")]),e._v(" Service Mesh")]),e._v(" "),t("p",[e._v("Service Mesh 是对 Kubernetes 的增强，提供了更多的能力。")]),e._v(" "),t("p",[e._v("2018年9月1日，Bilgin Ibryam 在 InfoQ 发表了一篇文章 "),t("a",{attrs:{href:"https://www.infoq.com/articles/microservices-post-kubernetes/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Microservices in a Post-Kubernetes Era"),t("OutboundLink")],1),e._v("，中文版见后 "),t("a",{attrs:{href:"https://www.infoq.cn/article/microservices-post-kubernetes",target:"_blank",rel:"noopener noreferrer"}},[e._v("Kubernetes 时代的微服务"),t("OutboundLink")],1),e._v("（译文有些错误，仅供参考）。")]),e._v(" "),t("p",[e._v("文中作者的观点是：在后 Kubernetes 时代，服务网格（Service Mesh）技术已"),t("strong",[e._v("完全取代了使用软件库实现")]),e._v("网络运维（例如 Hystrix 断路器）的方式。")]),e._v(" "),t("p",[e._v("如果说 Kubernetes 对 Spring Cloud 开了第一枪，那么 Service Mesh 就是 Spring Cloud 的终结者。")]),e._v(" "),t("h3",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),t("p",[e._v("最后我们用一个流程图来描述后端架构的发展历程")]),e._v(" "),t("p",[t("img",{attrs:{src:r(500),alt:"0ec340f33fb2b4dbdf558449107cca8e.png"}})]),e._v(" "),t("p",[t("strong",[e._v("每个关键节点的大概时间表")])]),e._v(" "),t("p",[e._v("|集中式架构     |~   |\n|分布式架构     |~   |\n|Docker         |2013|\n|微服务         |2014|\n|Spring Cloud   |2014|\n|Kubernetes 成熟|2017|\n|Service Mesh   |2017|")]),e._v(" "),t("p",[e._v("可以看出，微服务生态这里，Spring Cloud 为代表的这条路已经后继无人了，未来属于 Service Mesh 。")]),e._v(" "),t("p",[e._v("Service Mesh 经过2年的发展，目前 Service Mesh 已经足够成熟，已经有生产落地的案例，我们接下来就看看 Service Mesh，在此之前，我们要先理解一个概念，云原生。")]),e._v(" "),t("h2",{attrs:{id:"云原生-cloud-native"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#云原生-cloud-native"}},[e._v("#")]),e._v(" 云原生 Cloud Native")]),e._v(" "),t("p",[e._v("如何理解“云原生”？之所以将这个话题放在前面，是因为，这是对云原生概念的最基本的理解，而这会直接影响到后续的所有认知。")]),e._v(" "),t("p",[t("strong",[e._v("注意")]),e._v("：以下云原生的内容将全部引用敖小剑的 "),t("a",{attrs:{href:"https://www.infoq.cn/article/fA42rfjV*dYGAvRANFqE",target:"_blank",rel:"noopener noreferrer"}},[e._v("畅谈云原生（上）：云原生应用应该是什么样子？"),t("OutboundLink")],1),e._v(" 这篇文章，图画得太好了。")]),e._v(" "),t("p",[e._v("云原生的定义一直在发展，每个人对云原生的理解都可能不同，就如莎士比亚所说：一千个人眼中有一千个哈姆雷特。")]),e._v(" "),t("p",[e._v("2018 年 CNCF ("),t("a",{attrs:{href:"https://www.cncf.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Cloud Native Computing Foundation"),t("OutboundLink")],1),e._v(")更新了云原生的定义。")]),e._v(" "),t("p",[e._v("这是新定义中描述的代表技术，其中容器和微服务两项在不同时期的不同定义中都有出现，而服务网格这个在 2017 年才开始被社区接纳的新热点技术被非常醒目的列出来，和微服务并列，而不是我们通常认为的服务网格只是微服务在实施时的一种新的方式。"),t("img",{attrs:{src:r(501),alt:"0e7bf2db484f18f3ca373bd0773ffab8.png"}})]),e._v(" "),t("p",[e._v("那我们该如何理解云原生呢？我们尝试一下，将 Cloud Native 这个词汇拆开来理解，先看看什么是 Cloud。")]),e._v(" "),t("h3",{attrs:{id:"什么是云-cloud"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是云-cloud"}},[e._v("#")]),e._v(" 什么是云 Cloud")]),e._v(" "),t("p",[e._v("快速回顾一下云计算的历史，来帮助我们对云有个更感性的认识。")]),e._v(" "),t("p",[t("img",{attrs:{src:r(502),alt:"84e47db0ce05a2ca9a3ecb06317b5adb.png"}})]),e._v(" "),t("p",[e._v("云计算的出现和虚拟化技术的发展和成熟密切相关，2000 年前后 x86 的虚拟机技术成熟后，云计算逐渐发展起来。")]),e._v(" "),t("p",[t("img",{attrs:{src:r(503),alt:"372d7d3fb6da14098b5b63245401c814.png"}})]),e._v(" "),t("p",[e._v("基于虚拟机技术，陆续出现了 IaaS/PaaS/FaaS 等形态，以及他们的开源版本。")]),e._v(" "),t("p",[t("img",{attrs:{src:r(504),alt:"cb84372097b3e35cb9a1d48c24d56fcf.png"}})]),e._v(" "),t("p",[e._v("2013 年 docker 出现，容器技术成熟，然后围绕容器编排一场大战，最后在 2017 年底，kubernetes 胜出。2015 年 CNCF 成立，并在近年形成了 cloud native 生态。")]),e._v(" "),t("p",[e._v("在这个过程中，云的形态一直变化，可以看到：供应商提供的功能越来越多，而客户或者说应用需要自己管理的功能越来越少。")]),e._v(" "),t("p",[t("img",{attrs:{src:r(505),alt:"03bdb5f6de728bdb76dbb9a003b62263.png"}})]),e._v(" "),t("p",[t("strong",[e._v("架构也在一直适应云计算的变化")]),t("img",{attrs:{src:r(506),alt:"0185a2a404942f2aec01b6933a87f909.png"}})]),e._v(" "),t("h3",{attrs:{id:"什么是原生-native"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是原生-native"}},[e._v("#")]),e._v(" 什么是原生 Native")]),e._v(" "),t("p",[e._v("在回顾完云计算的历史之后，我们对 Cloud 有更深的认识，接着继续看一下：什么是 Native？")]),e._v(" "),t("p",[e._v("字典的解释是：与生俱来的。")]),e._v(" "),t("p",[e._v("那 Cloud 和 native 和在一起，又该如何理解？")]),e._v(" "),t("p",[t("img",{attrs:{src:r(507),alt:"bd47c8d112f60f5e91e3aab6bd7679dc.png"}})]),e._v(" "),t("p",[e._v("这里我们抛出一个我们自己的理解：云原生代表着原生为云设计。详细的解释是：应用原生被设计为在云上以最佳方式运行，充分发挥云的优势。")]),e._v(" "),t("p",[e._v("这个理解有点空泛，但是考虑到云原生的定义和特征在这些年间不停的变化，以及完全可以预料到的在未来的必然变化，我觉得，对云原生的理解似乎也只能回到云原生的出发点，而不是如何具体实现。")]),e._v(" "),t("h3",{attrs:{id:"cloud-native-是道-service-mesh-是术"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cloud-native-是道-service-mesh-是术"}},[e._v("#")]),e._v(" Cloud Native 是道，Service Mesh 是术")]),e._v(" "),t("p",[e._v("那在这么一个云原生理解的背景下，我再来介绍一下我对云原生应用的设想，也就是我觉得云原生应用应该是什么样子。")]),e._v(" "),t("p",[t("img",{attrs:{src:r(508),alt:"8f712541c80eb2f3d13b408e62031575.png"}})]),e._v(" "),t("p",[e._v("在云原生之前，底层平台负责向上提供基本运行资源。而应用需要满足业务需求和非业务需求，为了更好的代码复用，通用型好的非业务需求的实现往往会以类库和开发框架的方式提供，另外在 SOA/ 微服务时代部分功能会以后端服务的方式存在，这样在应用中就被简化为对其客户端的调用代码。")]),e._v(" "),t("p",[e._v("然后应用将这些功能，连同自身的业务实现代码，一起打包。")]),e._v(" "),t("p",[t("img",{attrs:{src:r(509),alt:"5d3cf3ad2988beee45dc45f82427fd6e.png"}})]),e._v(" "),t("p",[e._v("而云的出现，可以在提供各种资源之外，还提供各种能力，从而帮助应用，使得应用可以专注于业务需求的实现。")]),e._v(" "),t("p",[e._v("非业务需求相关的功能都被移到云，或者说基础设施中去了，以及下沉到基础设施的中间件。")]),e._v(" "),t("p",[t("img",{attrs:{src:r(510),alt:"fe0338fc565e48553b3c8622a369bd36.png"}})]),e._v(" "),t("p",[e._v("以服务间通讯为例：需要实现上面列举的各种功能。")]),e._v(" "),t("p",[t("img",{attrs:{src:r(511),alt:"c75c392145f3f39bd9042edce786e256.png"}})]),e._v(" "),t("p",[e._v("SDK 的思路：在应用层添加一个胖客户端，在这个客户端中实现各种功能。")]),e._v(" "),t("p",[t("img",{attrs:{src:r(512),alt:"1572f7e930ce0fc442ae21ac5e2de455.png"}})]),e._v(" "),t("p",[e._v("Service Mesh 的思路，体现在将 SDK 客户端的功能剥离出来，放到 Sidecar 中。就是把更多的事情下沉，下沉到基础设施中。")]),e._v(" "),t("p",[t("img",{attrs:{src:r(513),alt:"5176d2f8527054aac3e7106487090d80.png"}})]),e._v(" "),t("p",[e._v("在用户看来，应用长这样：")]),e._v(" "),t("p",[t("img",{attrs:{src:r(514),alt:"be9bfa387db52c4eaeb235c7a7a01945.png"}})]),e._v(" "),t("p",[e._v("云原生是我们的目标，Service Mesh 交出了自己的答卷，接下来我们可以回到 Service Mesh 这里了。")]),e._v(" "),t("h2",{attrs:{id:"service-mesh-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#service-mesh-2"}},[e._v("#")]),e._v(" Service Mesh")]),e._v(" "),t("p",[e._v("其中文译名是"),t("strong",[e._v("服务网格")]),e._v("，这个词最早使用由开发Linkerd的Buoyant公司提出，并在内部使用。")]),e._v(" "),t("p",[e._v("定义")]),e._v(" "),t("p",[t("img",{attrs:{src:r(515),alt:"4123d50c20385fa9300b32e039a6894a.png"}})]),e._v(" "),t("p",[e._v("服务网格的基本构成")]),e._v(" "),t("p",[t("img",{attrs:{src:r(516),alt:"8b69728340e60bc09d05422a21a85977.png"}})]),e._v(" "),t("h3",{attrs:{id:"纷争-2017"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#纷争-2017"}},[e._v("#")]),e._v(" 纷争 2017")]),e._v(" "),t("p",[e._v("2017 年年底，当非侵入式的 Service Mesh 技术终于从萌芽到走向了成熟，当 Istio/Conduit 横空出世，人们才惊觉：微服务并非只有侵入式一种玩法，更不是 Spring Cloud 的独角戏！")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://www.infoq.cn/article/2017-service-mesh",target:"_blank",rel:"noopener noreferrer"}},[e._v("解读 2017 之 Service Mesh：群雄逐鹿烽烟起"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("文章总结一下：")]),e._v(" "),t("p",[e._v("创业公司 Buoyant 的产品 Linkerd 开局拿下一血；")]),e._v(" "),t("p",[e._v("Envoy 默默耕耘；")]),e._v(" "),t("p",[e._v("从 Google 和 IBM 联手推出 Istio，Linkerd 急转直下；")]),e._v(" "),t("p",[e._v("2017 年底 Buoyant 推出 Conduit 背水一战；")]),e._v(" "),t("p",[e._v("Nginmesh 与 Kong 低调参与；")]),e._v(" "),t("h3",{attrs:{id:"百家争鸣-2018"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#百家争鸣-2018"}},[e._v("#")]),e._v(" 百家争鸣 2018")]),e._v(" "),t("p",[e._v("2018 年，Service Mesh 又多了哪些内容呢？在 2018 年，Service Mesh 在国内大热，有多家公司推出自己的 Service Mesh 产品和方案，Service Mesh 更加热闹了。")]),e._v(" "),t("p",[e._v("详细见这篇文章 "),t("a",{attrs:{href:"https://www.infoq.cn/article/DtxylyFwlyl7K5Jte*WI",target:"_blank",rel:"noopener noreferrer"}},[e._v("下一代微服务！Service Mesh 2018 年度总结"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("文章总结一下：")]),e._v(" "),t("p",[e._v("Service Mesh 在国内大热，有多家公司加入战场；")]),e._v(" "),t("p",[e._v("Istio 发布1.0，成为最受欢迎的 Service Mesh 项目，获得多方支持；")]),e._v(" "),t("p",[e._v("Envoy 继续稳扎稳打，Envoy 被 Istio 直接采用为数据平面，有望成为数据平面标准；")]),e._v(" "),t("p",[e._v("Linkerd1.x 陷入困境，Conduit 小步快跑，但响应平平，Buoyant 公司决定合并产品线，Linkerd1.x + Conduit = Linkerd2.0；")]),e._v(" "),t("p",[e._v("更多的公司参与 Service Mesh，国外有 Nginx、Consul、Kong、AWS等，国内有蚂蚁金服、新浪微博、华为，阿里 Dubbo，腾讯等；")]),e._v(" "),t("h3",{attrs:{id:"持续发展-2019"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#持续发展-2019"}},[e._v("#")]),e._v(" 持续发展 2019")]),e._v(" "),t("p",[e._v("2019 将会听到更多 Service Mesh 的声音，请关注"),t("a",{attrs:{href:"https://www.servicemesher.com",target:"_blank",rel:"noopener noreferrer"}},[e._v("Service Mesh 中文社区"),t("OutboundLink")],1)]),e._v(" "),t("h2",{attrs:{id:"istio"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#istio"}},[e._v("#")]),e._v(" Istio")]),e._v(" "),t("p",[e._v("前文讲到 Istio 是当前最受欢迎的 Service Mesh 框架，一句话定义 Istio：一个用来连接、管理和保护微服务的开放平台。")]),e._v(" "),t("p",[e._v("它能给我们的微服务提供哪些功能呢？")]),e._v(" "),t("h3",{attrs:{id:"连接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#连接"}},[e._v("#")]),e._v(" 连接")]),e._v(" "),t("ul",[t("li",[e._v("动态路由")]),e._v(" "),t("li",[e._v("超时重试")]),e._v(" "),t("li",[e._v("熔断")]),e._v(" "),t("li",[e._v("故障注入\n"),t("a",{attrs:{href:"https://istio.io/zh/docs/tasks/traffic-management/",target:"_blank",rel:"noopener noreferrer"}},[e._v("详细见官网介绍"),t("OutboundLink")],1)])]),e._v(" "),t("h3",{attrs:{id:"保护"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#保护"}},[e._v("#")]),e._v(" 保护")]),e._v(" "),t("p",[e._v("安全问题一开始就要做好，在 Istio 实现安全通讯是非常方便的。")]),e._v(" "),t("p",[e._v("Istio 支持双向 TLS 加密")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://istio.io/zh/docs/tasks/security/",target:"_blank",rel:"noopener noreferrer"}},[e._v("见官方文档"),t("OutboundLink")],1)]),e._v(" "),t("h3",{attrs:{id:"控制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#控制"}},[e._v("#")]),e._v(" 控制")]),e._v(" "),t("p",[e._v("速率限制")]),e._v(" "),t("p",[e._v("黑白名单")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://istio.io/zh/docs/tasks/policy-enforcement/",target:"_blank",rel:"noopener noreferrer"}},[e._v("见官方文档"),t("OutboundLink")],1)]),e._v(" "),t("h3",{attrs:{id:"观测"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#观测"}},[e._v("#")]),e._v(" 观测")]),e._v(" "),t("ul",[t("li",[e._v("指标度量：每秒请求数，Prometheus 与 Grafana")])]),e._v(" "),t("p",[e._v("使用 Grafana 观测流量情况")]),e._v(" "),t("p",[t("img",{attrs:{src:r(517),alt:"e0d7a41c3390fbaf08c9520c5a6be80b.png"}})]),e._v(" "),t("ul",[t("li",[e._v("分布式追踪：Jaeger 或 Zipkin")])]),e._v(" "),t("p",[e._v("快速观测调用链路")]),e._v(" "),t("p",[t("img",{attrs:{src:r(518),alt:"1b1793a797651edd432a7d15b9af2b46.png"}})]),e._v(" "),t("ul",[t("li",[t("p",[e._v("日志：非应用日志")])]),e._v(" "),t("li",[t("p",[e._v("网格可视化")])])]),e._v(" "),t("p",[e._v("快速理清服务的关系")]),e._v(" "),t("p",[t("img",{attrs:{src:r(519),alt:"0212a2ab8c82fe4469ccf48f761d4752.png"}})]),e._v(" "),t("h2",{attrs:{id:"总结-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结-2"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),t("p",[e._v("虚拟化技术推动这云计算技术的变革，顺带也影响了后端架构的演进，目前我们身处云时代，将会有更多的元原生应用出现，Istio 作为其中的佼佼者，值得你投入一份精力了解一下。")]),e._v(" "),t("h2",{attrs:{id:"学习资料-指引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#学习资料-指引"}},[e._v("#")]),e._v(" 学习资料/指引")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://www.servicemesher.com",target:"_blank",rel:"noopener noreferrer"}},[e._v("Service Mesh 中文社区"),t("OutboundLink")],1),e._v(" 上面提供了丰富的学习资料。")]),e._v(" "),t("p",[e._v("搭建 Kubernetes 集群会比较麻烦，推荐几种方式。主要原因是很多镜像需要翻墙才能下载。")]),e._v(" "),t("ol",[t("li",[e._v("Docker Desktop 自带的 Kubernetes 集群")]),e._v(" "),t("li",[t("a",{attrs:{href:"https://blog.csdn.net/aixiaoyang168/article/details/88600530",target:"_blank",rel:"noopener noreferrer"}},[e._v("使用 Rancher2.0 搭建 Kubernetes 集群"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("在 Google Cloud 上直接开集群，可以领 300 美金的体验金，需要翻墙\n不推荐 MiniKube,翻墙和代理问题非常难搞。")])]),e._v(" "),t("p",[e._v("再附上 Docker "),t("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/26033249",target:"_blank",rel:"noopener noreferrer"}},[e._v("设置代理的方式"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("a",{attrs:{href:"https://katacoda.com/courses/istio/deploy-istio-on-kubernetes",target:"_blank",rel:"noopener noreferrer"}},[e._v("在线体验 Istio"),t("OutboundLink")],1)]),e._v(" "),t("h2",{attrs:{id:"参考资料"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[e._v("#")]),e._v(" 参考资料")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://jimmysong.io/kubernetes-handbook/",target:"_blank",rel:"noopener noreferrer"}},[e._v("kubernetes-handbook"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("a",{attrs:{href:"https://www.servicemesher.com/istio-handbook/",target:"_blank",rel:"noopener noreferrer"}},[e._v("istio-handbook"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("a",{attrs:{href:"https://skyao.gitbooks.io/learning-microservice/content/definition/Martin-Fowler/microservices.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("微服务学习笔记"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("a",{attrs:{href:"https://www.infoq.cn/article/fA42rfjV*dYGAvRANFqE",target:"_blank",rel:"noopener noreferrer"}},[e._v("畅谈云原生（上）：云原生应用应该是什么样子？"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("a",{attrs:{href:"https://juejin.im/entry/59fbab2151882576ea350afb",target:"_blank",rel:"noopener noreferrer"}},[e._v("Service Mesh：下一代微服务？"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("a",{attrs:{href:"https://www.jianshu.com/p/8104194ff6fd",target:"_blank",rel:"noopener noreferrer"}},[e._v("从架构到组件，深挖istio如何连接、管理和保护微服务2.0？"),t("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=v.exports}}]);