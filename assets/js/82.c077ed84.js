(window.webpackJsonp=window.webpackJsonp||[]).push([[82],{654:function(r,e,t){"use strict";t.r(e);var v=t(2),s=Object(v.a)({},(function(){var r=this,e=r._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[e("h2",{attrs:{id:"doris-的问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#doris-的问题"}},[r._v("#")]),r._v(" Doris 的问题")]),r._v(" "),e("p",[r._v("Doris 已经在我们公司落地了一段时间，碰到比较多的问题，\nDoris 在数据架构上和上下游组件的集成工作做得比较少,满足不了我们公司的业务模式。")]),r._v(" "),e("p",[r._v("我们主要做区块链数据指标解析，区块链上有非常多的应用，我们业务上需要不断解析新的指标。")]),r._v(" "),e("p",[r._v("我们经常需要短时间内将 100GB 级别的数据从 Data Lake 写入到 Doris 中，Doris 在这一块上表现很糟糕，\n使用 Broker Load 写入大量数据很容易占满 CPU 影响查询层，\n期望 Doris 多租户功能来实现读写分离，而 Doris多租户的实现也非常麻烦，一点都不灵活，也需要额外的资源。")]),r._v(" "),e("p",[r._v("使用 Doris Spark Connector 来写入数据到 Doris 也是小 BUG 不断，最大的问题是该 Connector 无法保障数据能稳定写入，\n经常因为 Doris 负载过高导致 Spark 写入报错，程序被终止，需要不断地重试。\n背后的根源还是 Doris 在数据生产这一块投入比较少，Doris Spark Connector 没多少用户。\n大部分人使用 Doris 用的比较多的方式还是 MySQL CDC Flink 写入 Doris 那一套。")]),r._v(" "),e("h2",{attrs:{id:"替代方案-trino"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#替代方案-trino"}},[r._v("#")]),r._v(" 替代方案 - Trino")]),r._v(" "),e("p",[r._v("我们把大数据架构简单拆分为存，算、查三层，他们的可选项有：")]),r._v(" "),e("ul",[e("li",[r._v("存： Bigquery(Snowflake)、Iceberg、Hudi，Delta Lake")]),r._v(" "),e("li",[r._v("算： Spark、Trino、Flink")]),r._v(" "),e("li",[r._v("查询： 各种 OLAP，例如 Doris，Trino，Clickhouse")])]),r._v(" "),e("p",[r._v("上面提到的最大的问题就是我们在把数据从 Lake(存储层) 同步到 Doris (查询层) 碰到的问题，\n如果我们把同步过程去掉呢？就不会有这个痛苦了，所以 Trino 就进入了我们视野。")]),r._v(" "),e("p",[r._v("我们的存储层正在经历从 Bigquery 升级到 Iceberg 的过程，而 Trino 可以直接查询 Bigquery 和 Iceberg 的数据，\n可以完美解决升级过程跨库的问题。")]),r._v(" "),e("p",[r._v("而且 Trino 可以对接的 BI 层也相当丰富，包括：")]),r._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://wix.github.io/quix/",target:"_blank",rel:"noopener noreferrer"}},[r._v("Quix"),e("OutboundLink")],1)]),r._v(" "),e("li",[e("a",{attrs:{href:"https://superset.apache.org/",target:"_blank",rel:"noopener noreferrer"}},[r._v("Apache Superset"),e("OutboundLink")],1)]),r._v(" "),e("li",[e("a",{attrs:{href:"https://www.metabase.com/",target:"_blank",rel:"noopener noreferrer"}},[r._v("Metabase"),e("OutboundLink")],1),r._v(" (我们正在使用)")])]),r._v(" "),e("p",[r._v("Trino 背后有个 Startburst 公司为它做了大量的生态建设工作")]),r._v(" "),e("h2",{attrs:{id:"doris-iceberg-就是个半成品"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#doris-iceberg-就是个半成品"}},[r._v("#")]),r._v(" Doris + Iceberg? 就是个半成品")]),r._v(" "),e("p",[r._v("当初我们选择 Doris 很大一部分原因是 Doris 声称他们支持 Iceberg 拓展数据，实际探索哦使用后，发现这就是个半成品，不能用于生产。")]),r._v(" "),e("p",[r._v("问题1：\nIceberg 是可以将数据存放在 GCS、S3 等云存储之上的，而 Doris 对接的 Iceberg， 只能读取存储在 HDFS 上的数据，\n读取 GCS 数据将会报错。")]),r._v(" "),e("p",[r._v("问题2：\nIceberg 作为 Doris 的外表，是无法使用 Doris 那一套索引优化方案的。\n经过不严谨测试 Doris 读取原生表对比读取 Iceberg 外部表，性能差距在 10 倍左右，\n也就意味着，Doris 的 Iceberg 外表就是摆设。")]),r._v(" "),e("p",[r._v("再次吐槽下，Doris 生态还是太年轻了，在数据架构上和上下游组件的集成工作上投入太少。")]),r._v(" "),e("h2",{attrs:{id:"性能测试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#性能测试"}},[r._v("#")]),r._v(" 性能测试")]),r._v(" "),e("p",[r._v("以下所以测试都是我们实际生产中碰到的个别例子，结论不严谨，仅供参考")]),r._v(" "),e("h3",{attrs:{id:"case-1-大表-join"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#case-1-大表-join"}},[r._v("#")]),r._v(" case 1:大表 join")]),r._v(" "),e("p",[r._v("一个 800 GB 的 table1 join 另一个 50 GB 的 table2 并做复杂业务计算。\n测试结果")]),r._v(" "),e("table",[e("thead",[e("tr",[e("th",[r._v("DB")]),r._v(" "),e("th",[r._v("机器配置")]),r._v(" "),e("th",[r._v("执行速度")])])]),r._v(" "),e("tbody",[e("tr",[e("td",[r._v("Trino-Iceberg")]),r._v(" "),e("td",[r._v("1（32C  120G）")]),r._v(" "),e("td",[r._v("avg 30s")])]),r._v(" "),e("tr",[e("td",[r._v("Doris")]),r._v(" "),e("td",[r._v("3（96C  380G）")]),r._v(" "),e("td",[r._v("avg 180s")])])])]),r._v(" "),e("p",[r._v("Trino 在机器配置弱于 Doris 的情况下整体查询性能还是优于 Doris")]),r._v(" "),e("h3",{attrs:{id:"case-2-大单表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#case-2-大单表"}},[r._v("#")]),r._v(" case 2:大单表")]),r._v(" "),e("p",[r._v("测试用 sql")]),r._v(" "),e("div",{staticClass:"language-sql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[r._v("select")]),r._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[r._v("distinct")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("(")]),r._v("address"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v(")")]),r._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[r._v("from")]),r._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[r._v("table")]),r._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[r._v("group")]),r._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[r._v("by")]),r._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[r._v("day")]),r._v("\n")])]),r._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[r._v("1")]),e("br")])]),e("p",[r._v("全部扫描，无法使用分区，测试结果：")]),r._v(" "),e("table",[e("thead",[e("tr",[e("th",[r._v("DB")]),r._v(" "),e("th",[r._v("机器配置")]),r._v(" "),e("th",[r._v("执行速度")]),r._v(" "),e("th",[r._v("磁盘空间占比")])])]),r._v(" "),e("tbody",[e("tr",[e("td",[r._v("Trino-Iceberg")]),r._v(" "),e("td",[r._v("1（8C  30G）")]),r._v(" "),e("td",[r._v("1 (avg 86s)")]),r._v(" "),e("td",[r._v("1(parquet 压缩, 4.4G)")])]),r._v(" "),e("tr",[e("td",[r._v("Doris")]),r._v(" "),e("td",[r._v("3（24C  96G）")]),r._v(" "),e("td",[r._v("1.7 (avg 149s)")]),r._v(" "),e("td",[r._v("6 (25G)")])])])]),r._v(" "),e("p",[r._v("Trino-Iceberg 用了 1/3 的算力和 1/6 的存储，还比 Doris 快 1.7 倍")]),r._v(" "),e("h3",{attrs:{id:"case-3-iceberg-的作用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#case-3-iceberg-的作用"}},[r._v("#")]),r._v(" case 3:Iceberg 的作用")]),r._v(" "),e("p",[r._v("Trino-Iceberg 这个组合查起来快，有一部分原因要归功于 Iceberg，我们做了个对比测试,")]),r._v(" "),e("p",[r._v("把相同的 table 存储在 bigquery 和 Iceberg 中，分别测试他们的查询性能")]),r._v(" "),e("table",[e("thead",[e("tr",[e("th",[r._v("存储")]),r._v(" "),e("th",[r._v("执行速度")]),r._v(" "),e("th",[r._v("磁盘空间占比")])])]),r._v(" "),e("tbody",[e("tr",[e("td",[r._v("Trino-Iceberg")]),r._v(" "),e("td",[r._v("1 (avg 53s)")]),r._v(" "),e("td",[r._v("1(parquet 压缩, 4.4G)")])]),r._v(" "),e("tr",[e("td",[r._v("Trino-bigquery")]),r._v(" "),e("td",[r._v("2 (avg 120s)")]),r._v(" "),e("td",[r._v("5 (20G)")])])])]),r._v(" "),e("p",[r._v("得益于 Iceberg 对数据的压缩(不是全部原因), Trino-Iceberg 组合获得更优秀的性能")]),r._v(" "),e("h3",{attrs:{id:"性能测试总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#性能测试总结"}},[r._v("#")]),r._v(" 性能测试总结")]),r._v(" "),e("p",[r._v("Trino-Iceberg 组合的性能比 Doris 好得非常多，大概在 8 倍左右，这个差距太大了，我一度无法相信。")]),r._v(" "),e("p",[r._v("甚至怀疑是我们水平不够，没有正确使用地 Doris，但是过去几个月对 Doris 的研究，我们还是有信心说自己是掌握了 Doris 的。")]),r._v(" "),e("p",[r._v("还是继续观察 Trino-Iceberg 接下来的表现吧。")]),r._v(" "),e("p",[r._v("换个角度思考，假设真是我们水平低，那是不是更能说明 Trino-Iceberg 组合的强大之处呢，简单使用就能保持高性能，没有复杂的配置和维护。")]),r._v(" "),e("h2",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[r._v("#")]),r._v(" 总结")]),r._v(" "),e("ol",[e("li",[r._v("Doris 周边生态还有很多的上升空间，期待它未来的表现")]),r._v(" "),e("li",[r._v("Trino-Iceberg 组合真的快，去试试")])])])}),[],!1,null,null,null);e.default=s.exports}}]);