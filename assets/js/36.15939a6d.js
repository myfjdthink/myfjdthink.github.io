(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{333:function(t,a,e){t.exports=e.p+"assets/img/iceberg_file_list.e18423da.png"},540:function(t,a,e){t.exports=e.p+"assets/img/iceberg_data_struct.c1756d06.png"},659:function(t,a,e){"use strict";e.r(a);var r=e(2),s=Object(r.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"iceberg-优化方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#iceberg-优化方案"}},[t._v("#")]),t._v(" Iceberg 优化方案")]),t._v(" "),a("p",[t._v("Iceberg 本身可以通过 metadata 上的 static 信息有效地过滤数据，减少底层数据的扫描量，可以"),a("a",{attrs:{href:"https://iceberg.apache.org/docs/latest/performance/#scan-planning",target:"_blank",rel:"noopener noreferrer"}},[t._v("达到 10 倍的性能提升"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("p",[t._v("除此之外，我们还可以有更多的方式来优化查询，例如 Bloom Filter Index 和 Order 排序。")]),t._v(" "),a("p",[t._v("为了能深入理解其优化原理，我们需要对 Iceberg 的数据结构和查询生命周期有个基本了解。")]),t._v(" "),a("h2",{attrs:{id:"iceberg-数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#iceberg-数据结构"}},[t._v("#")]),t._v(" Iceberg 数据结构")]),t._v(" "),a("p",[t._v("详细内容可以参考以下几篇文章，讲得非常好")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.dremio.com/blog/a-hands-on-look-at-the-structure-of-an-apache-iceberg-table/",target:"_blank",rel:"noopener noreferrer"}},[t._v("A Hands-On Look at the Structure of an Apache Iceberg Table"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/488467438",target:"_blank",rel:"noopener noreferrer"}},[t._v("Iceberg 原理分析"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("整体数据结构")]),t._v(" "),a("ul",[a("li",[t._v("data files: 数据文件，可以是 parquet，orc 等格式")]),t._v(" "),a("li",[t._v("manifest file:  manifest file 可以索引多个数据文件(data files), 作用是记录 data file 的静态信息，min max value 等")]),t._v(" "),a("li",[t._v("manifest list file: 一个快照一个 manifest list file ，manifest file 文件的索引，作用是区分不同分区")]),t._v(" "),a("li",[t._v("metadata file: 版本文件, 区分不同版本")]),t._v(" "),a("li",[t._v("catalog")])]),t._v(" "),a("p",[a("img",{attrs:{src:e(540),alt:"iceberg_data_struct.png"}})]),t._v(" "),a("p",[t._v("在磁盘上的文件列表示例")]),t._v(" "),a("p",[a("img",{attrs:{src:e(333),alt:"iceberg_file_list.png"}})]),t._v(" "),a("h2",{attrs:{id:"iceberg-查询生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#iceberg-查询生命周期"}},[t._v("#")]),t._v(" Iceberg 查询生命周期")]),t._v(" "),a("p",[t._v("详细内容可以看这篇文章 "),a("a",{attrs:{href:"https://www.dremio.com/blog/the-life-of-a-read-query-for-apache-iceberg-tables/",target:"_blank",rel:"noopener noreferrer"}},[t._v("The Life of a Read Query for Apache Iceberg Tables"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("假设我们做以下查询")]),t._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" orders\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" order_ts "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("BETWEEN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2021-06-01 10:00:00'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2022-05-3110:00:00'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" amount "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("其执行流程如下：")]),t._v(" "),a("ol",[a("li",[t._v("确定 catalog，默认是 default，通过文件夹过滤")]),t._v(" "),a("li",[t._v("确定 table name 是 orders，通过文件夹过滤")]),t._v(" "),a("li",[t._v("确定 snapshot version，默认是最新 version，根据 metadata file 里的信息过滤")]),t._v(" "),a("li",[t._v("确定 partition，是 "),a("code",[t._v("BETWEEN '2021-06-01 10:00:00' and '2022-05-3110:00:00'")]),t._v("，根据 manifest list file 里的信息过滤")]),t._v(" "),a("li",[t._v("确定 过滤条件 "),a("code",[t._v("amount > 10")]),t._v("，根据 manifest file 来过滤，其记录了每个 data file 里 amount 的 min max value，不符合条件的可以直接过滤")])]),t._v(" "),a("p",[t._v("正是这一系列的过滤，大大减少了数据 load 到内存的数量，加速了查询")]),t._v(" "),a("h2",{attrs:{id:"索引优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引优化"}},[t._v("#")]),t._v(" 索引优化")]),t._v(" "),a("p",[t._v("在了解 Iceberg 的基本数据结构和查询方式后，接下来介绍几种索引优化方案")]),t._v(" "),a("h3",{attrs:{id:"bloom-filter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bloom-filter"}},[t._v("#")]),t._v(" Bloom Filter")]),t._v(" "),a("p",[t._v("在 data files 层，如果我们使用了 parquet orc 等数据结构，我们可以利用这类数据结构提供的 bloom filter 功能。")]),t._v(" "),a("p",[t._v("bloom filter 可以快速判断一个元素存不存在，不存在的话，可以直接跳过扫描该 data file。")]),t._v(" "),a("p",[t._v("如果一个字段的区分度特别高，例如 id，hash 值这样的唯一性高的字段，就适合添加 bloom filter，反之，像城市名，省份名，这样的区分地很低的字段则不适合。")]),t._v(" "),a("p",[t._v("使用方法：\n在 Trino 中，建表时配置 "),a("code",[t._v("orc_bloom_filter_columns")]),t._v(" 和 "),a("code",[t._v("orc_bloom_filter_fpp")]),t._v(" 两项。")]),t._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" orders "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    order_id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    create_time "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("date")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    amount "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WITH")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    format "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ORC'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    location "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/var/example_tables/test_table'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    orc_bloom_filter_columns "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ARRAY"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'order_id'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    orc_bloom_filter_fpp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.05")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("p",[t._v("如果是对已存在的 table 修改配置，旧数据不会自动添加 bloom filter，需要重新写入数据，或者使用 Spark 的 rewrite 功能。")]),t._v(" "),a("p",[t._v("注意：")]),t._v(" "),a("ul",[a("li",[t._v("可同时对多个 key 做 bloom filter")]),t._v(" "),a("li",[t._v("bloom filter 带来的额外存储不大，一个字段大概增加 1% 的存储空间")]),t._v(" "),a("li",[t._v("bloom filter 只能做精确过滤 a=1 ，不能做大小过滤 a > 1")])]),t._v(" "),a("p",[t._v("我们实测下来，bloom filter 普遍能带来 3 倍的查询速度提升")]),t._v(" "),a("h3",{attrs:{id:"order"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#order"}},[t._v("#")]),t._v(" Order")]),t._v(" "),a("p",[t._v("目前 Trino 还不支持写入 Iceberg 时对数据做排序 Order，所以通过 Trino 写入的数据，每个 data file 的内容是乱序的，这样会导致 min max value 的过滤效果变差。")]),t._v(" "),a("p",[t._v("在 Trino 解决这个问题之前，我们可以通过 Spark 对已有数据做 rewrite 排序")]),t._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("spark"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sql"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"CALL footprint.system.rewrite_data_files(table => 'catalog_name.table_name', strategy => 'sort', sort_order => 'amount DESC')\"")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("注意：")]),t._v(" "),a("ul",[a("li",[t._v("Order 字段应选择用户最常用的过滤字段")]),t._v(" "),a("li",[t._v("Order 在 1 partition 里有多个 data file 是效果更明显，可以调大 partition 的数据量，例如按日分区改为按月分区，或者调低 data file 的最大值，例如从 1G 改为 100M")])]),t._v(" "),a("p",[t._v("我们实测下来，设置好 Order 普遍能带来 10 倍的查询速度提升")]),t._v(" "),a("h3",{attrs:{id:"z-order"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#z-order"}},[t._v("#")]),t._v(" Z-Order")]),t._v(" "),a("p",[t._v("这里就不介绍其原理啦，因为 Order 只能一个字段排序，Z—Order 结构可以对多个字段同时排序。")]),t._v(" "),a("p",[t._v("可以通过 Spark 对已有数据做 rewrite 排序，排序方式是 zorder")]),t._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("spark"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sql"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"CALL footprint.system.rewrite_data_files(table => 'catalog_name.table_name', strategy => 'sort', sort_order => 'zorder(amount, product_name)')\"")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("其实就是把 Order 的提升效果，分摊到多个字段上去了。")]),t._v(" "),a("p",[t._v("我们实测下来，设置好 Z-Order 普遍能带来 3 倍的查询速度提升")]),t._v(" "),a("h2",{attrs:{id:"更多优化方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更多优化方案"}},[t._v("#")]),t._v(" 更多优化方案")]),t._v(" "),a("p",[t._v("除了添加索引优化查询速度，还有其他设置可以优化 Iceberg，我们逐一介绍")]),t._v(" "),a("h3",{attrs:{id:"向量化查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#向量化查询"}},[t._v("#")]),t._v(" 向量化查询")]),t._v(" "),a("p",[t._v("TBD")]),t._v(" "),a("h3",{attrs:{id:"snapshot-清理-与-小文件合并"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#snapshot-清理-与-小文件合并"}},[t._v("#")]),t._v(" Snapshot 清理 与 小文件合并")]),t._v(" "),a("p",[t._v("Trino 写入 Iceberg 默认使用的是 "),a("code",[t._v("merge on read")]),t._v(" 策略，这样会导致 Snapshot 版本过多之后，查询性能会急剧下降，因为每次查询都要做 merge 操作。")]),t._v(" "),a("p",[t._v("可以使用以下方式对 Snapshot 做定期清理，操作方式这里不介绍了，自行搜索吧")]),t._v(" "),a("p",[t._v("频繁往 Iceberg 写入数据的时候，会产生很多小文件，同样会影响查询性能，解决方案是类似的。")])])}),[],!1,null,null,null);a.default=s.exports}}]);