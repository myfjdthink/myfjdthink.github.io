(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{614:function(e,t,a){"use strict";a.r(t);var s=a(2),r=Object(s.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"typescript-介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#typescript-介绍"}},[e._v("#")]),e._v(" TypeScript 介绍")]),e._v(" "),t("h1",{attrs:{id:"typescript-介绍-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#typescript-介绍-2"}},[e._v("#")]),e._v(" TypeScript 介绍")]),e._v(" "),t("h2",{attrs:{id:"前言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[e._v("#")]),e._v(" 前言")]),e._v(" "),t("p",[e._v("TypeScript 支持 ECMAScript 2015 的各种特性，关于 ECMAScript 2015 的特性本文将不再介绍。")]),e._v(" "),t("p",[e._v("推荐阅读"),t("a",{attrs:{href:"http://es6.ruanyifeng.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("ECMAScript 6入门"),t("OutboundLink")],1)]),e._v(" "),t("h2",{attrs:{id:"typescript-是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#typescript-是什么"}},[e._v("#")]),e._v(" TypeScript 是什么")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://www.typescriptlang.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("TypeScript"),t("OutboundLink")],1),e._v(" 是 微软出品的编程语言，是JavaScript 的超集。")]),e._v(" "),t("li",[e._v("具有类型系统，所以叫 TypeScript")]),e._v(" "),t("li",[e._v("支持 ES6 甚至 ES7 的 async functions and decorators")])]),e._v(" "),t("h2",{attrs:{id:"基础类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基础类型"}},[e._v("#")]),e._v(" 基础类型")]),e._v(" "),t("ul",[t("li",[e._v("boolean")]),e._v(" "),t("li",[e._v("number")]),e._v(" "),t("li",[e._v("string")]),e._v(" "),t("li",[e._v("array")]),e._v(" "),t("li",[e._v("tuple+联合类型（额，这个很难懂，后面有解释）")]),e._v(" "),t("li",[e._v("enum")]),e._v(" "),t("li",[e._v("any")]),e._v(" "),t("li",[e._v("void\nOK,如何声明一个变量的类型呢 ?")])]),e._v(" "),t("p",[e._v("屁股后面加:")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('let isDone:boolean = false;let decLiteral: number = 6;let name: string = "bob";let list: number[] = [1, 2, 3];let x: [string, number];enum Color {Red, Green, Blue};let c: Color = Color.Green;let notSure: any = 4;\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("h3",{attrs:{id:"数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[e._v("#")]),e._v(" 数组")]),e._v(" "),t("p",[e._v("注意数组内的元素类型要统一，真正的数组。")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("let list: number[] = [1, 2, 3];\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("第二种方式是使用数组泛型，Array<元素类型>：")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("let list: Array<number> = [1, 2, 3];\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("h3",{attrs:{id:"tuple-元组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tuple-元组"}},[e._v("#")]),e._v(" Tuple 元组")]),e._v(" "),t("p",[e._v("类似数组，允许不同类型。")]),e._v(" "),t("ul",[t("li",[e._v("元素数量固定")]),e._v(" "),t("li",[e._v("元素类型确定")])]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// Declare a tuple typelet x: [string, number];// Initialize itx = ['hello', 10]; // OK// Initialize it incorrectlyx = [10, 'hello']; // Error\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("h3",{attrs:{id:"enum-枚举"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#enum-枚举"}},[e._v("#")]),e._v(" Enum 枚举")]),e._v(" "),t("p",[e._v("enum类型是对JavaScript标准数据类型的一个补充。 像C#等其它语言一样，使用枚举类型可以为一组数值赋予友好的名字。")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("enum Color {Red, Green, Blue};let c: Color = Color.Green;\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("h3",{attrs:{id:"any-任意值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#any-任意值"}},[e._v("#")]),e._v(" Any 任意值")]),e._v(" "),t("p",[e._v("兼容 js 代码")]),e._v(" "),t("h3",{attrs:{id:"void-空值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#void-空值"}},[e._v("#")]),e._v(" Void 空值")]),e._v(" "),t("h3",{attrs:{id:"type-assertions-类型断言-强制类型转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#type-assertions-类型断言-强制类型转换"}},[e._v("#")]),e._v(" Type assertions 类型断言（强制类型转换）")]),e._v(" "),t("p",[e._v("直接告诉编译器这个变量的类型")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('let someValue: any = "this is a string";let strLength: number = (<string>someValue).length;\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("hr"),e._v(" "),t("h2",{attrs:{id:"接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#接口"}},[e._v("#")]),e._v(" 接口")]),e._v(" "),t("p",[e._v("首先说明如果你是java程序员，请一定忘记interface，此处的接口和彼处接口完全不是一个思想。")]),e._v(" "),t("p",[e._v("接口是一种约定，用于规范程序。")]),e._v(" "),t("p",[e._v("首先来一个最简单的接口")]),e._v(" "),t("h3",{attrs:{id:"字面量接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字面量接口"}},[e._v("#")]),e._v(" 字面量接口")]),e._v(" "),t("p",[e._v("不使用interface关键字就定义了一个接口")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('function printLabel(labelledObj: {label: string}) {  console.log(labelledObj.label);}var myObj = {size: 10, label: "Size 10 Object"};printLabel(myObj);\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("上面没有interface关键字，哪个是接口呢?")]),e._v(" "),t("blockquote",[t("p",[e._v("{label: string}")])]),e._v(" "),t("p",[e._v("你说这个玩意不是变量labelledObj的类型吗？我知道typescript说白了就是 js 的类型系统，前面也介绍了如：Boolean,Number,String,Array,Enum,Any,Void")]),e._v(" "),t("p",[e._v("其实接口就是定义了一个对象有哪些属性，并且属性值是什么类型")]),e._v(" "),t("h3",{attrs:{id:"使用字面量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用字面量"}},[e._v("#")]),e._v(" 使用字面量")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('interface LabelledValue {  label: string;}function printLabel(labelledObj: LabelledValue) {  console.log(labelledObj.label);}let myObj = {size: 10, label: "Size 10 Object"};printLabel(myObj);\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("h2",{attrs:{id:"类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类"}},[e._v("#")]),e._v(" 类")]),e._v(" "),t("h3",{attrs:{id:"定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[e._v("#")]),e._v(" 定义")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('class Greeter {    greeting: string;    constructor(message: string) {        this.greeting = message;    }    greet() {        return "Hello, " + this.greeting;    }}let greeter = new Greeter("world");\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("h3",{attrs:{id:"继承"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#继承"}},[e._v("#")]),e._v(" 继承")]),e._v(" "),t("p",[e._v("见官方的 demo")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://www.typescriptlang.org/play/index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://www.typescriptlang.org/play/index.html"),t("OutboundLink")],1)]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('class Animal {    constructor(public name: string) { }    move(distanceInMeters: number = 0) {        console.log(`${this.name} moved ${distanceInMeters}m.`);    }    moveClone(distanceInMeters: number = 0){        this.move(distanceInMeters)    }}class Snake extends Animal {    constructor(name: string) { super(name); }    move(distanceInMeters = 5) {        console.log("Slithering...");        super.move(distanceInMeters);    }}class Horse extends Animal {    constructor(name: string) { super(name); }    move(distanceInMeters = 45) {        console.log("Galloping...");        super.move(distanceInMeters);    }}let sam = new Snake("Sammy the Python");let tom: Animal = new Horse("Tommy the Palomino");sam.moveClone();tom.moveClone(34);\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("子类重写了父类方法move,然后父类引用指向子类对象，多态实现了！")]),e._v(" "),t("p",[e._v("支持访问修饰符 public private等")]),e._v(" "),t("p",[e._v("支持 get set 控制对对象成员的访问")]),e._v(" "),t("h2",{attrs:{id:"typescript-优秀的地方"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#typescript-优秀的地方"}},[e._v("#")]),e._v(" TypeScript 优秀的地方")]),e._v(" "),t("h3",{attrs:{id:"支持-es6-新特性-一些-es7的特性也支持"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#支持-es6-新特性-一些-es7的特性也支持"}},[e._v("#")]),e._v(" 支持 ES6 新特性，一些 ES7的特性也支持")]),e._v(" "),t("h3",{attrs:{id:"灵活的类型系统-具有类型推导"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#灵活的类型系统-具有类型推导"}},[e._v("#")]),e._v(" 灵活的类型系统，具有类型推导")]),e._v(" "),t("p",[e._v("TypeScript里，在有些没有明确指出类型的地方，类型推论会帮助提供类型。如下面的例子")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("let x = 3;\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("变量x的类型被推断为数字。")]),e._v(" "),t("p",[e._v("不会像 Java 那样每个地方都写死类型，类型更多时候用于限制函数的输入与返回。")]),e._v(" "),t("h3",{attrs:{id:"编译代码的可读性高"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#编译代码的可读性高"}},[e._v("#")]),e._v(" 编译代码的可读性高")]),e._v(" "),t("p",[e._v("可以看看 typescript 提供的 demo")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://www.typescriptlang.org/play/index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://www.typescriptlang.org/play/index.html"),t("OutboundLink")],1)]),e._v(" "),t("h3",{attrs:{id:"可复用-npm-module"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#可复用-npm-module"}},[e._v("#")]),e._v(" 可复用 npm module")]),e._v(" "),t("p",[e._v("可以利用 Node 的生态。")]),e._v(" "),t("ul",[t("li",[e._v("tsd")])]),e._v(" "),t("p",[e._v("通过声明文件来复用 npm 包")]),e._v(" "),t("ul",[t("li",[e._v("typings")])]),e._v(" "),t("p",[e._v("since 1.8，更合理地管理 tsd 文件的方式，把 tsd 文件植入到 npm 包中。")]),e._v(" "),t("h2",{attrs:{id:"参考文档"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考文档"}},[e._v("#")]),e._v(" 参考文档")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://segmentfault.com/a/1190000004620132",target:"_blank",rel:"noopener noreferrer"}},[e._v("TypeScript-Basic"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("a",{attrs:{href:"https://segmentfault.com/a/1190000004619949",target:"_blank",rel:"noopener noreferrer"}},[e._v("TypeScript interface"),t("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=r.exports}}]);